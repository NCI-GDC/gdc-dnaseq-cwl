{
    "$graph": [
        {
            "class": "Workflow",
            "id": "#main",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "name": "#target_kit_schema.yml/amplicon_kit_set_file",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_file/amplicon_kit_amplicon_file",
                                    "type": "File"
                                },
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_file/amplicon_kit_target_file",
                                    "type": "File"
                                }
                            ]
                        },
                        {
                            "name": "#target_kit_schema.yml/amplicon_kit_set_uuid",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_uuid/amplicon_kit_amplicon_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_uuid/amplicon_kit_amplicon_file_size",
                                    "type": "long"
                                },
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_uuid/amplicon_kit_target_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#target_kit_schema.yml/amplicon_kit_set_uuid/amplicon_kit_target_file_size",
                                    "type": "long"
                                }
                            ]
                        },
                        {
                            "name": "#target_kit_schema.yml/capture_kit_set_file",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_file/capture_kit_bait_file",
                                    "type": "File"
                                },
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_file/capture_kit_target_file",
                                    "type": "File"
                                }
                            ]
                        },
                        {
                            "name": "#target_kit_schema.yml/capture_kit_set_uuid",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_uuid/capture_kit_bait_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_uuid/capture_kit_bait_file_size",
                                    "type": "long"
                                },
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_uuid/capture_kit_target_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#target_kit_schema.yml/capture_kit_set_uuid/capture_kit_target_file_size",
                                    "type": "long"
                                }
                            ]
                        },
                        {
                            "name": "#readgroup.yml/readgroup_meta",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#readgroup.yml/readgroup_meta/CN",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/DS",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/DT",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/FO",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/ID",
                                    "type": "string"
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/KS",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/LB",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/PI",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/PL",
                                    "type": "string"
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/PM",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/PU",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_meta/SM",
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "name": "#readgroup.yml/readgroup_fastq_file",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_file/forward_fastq",
                                    "type": "File"
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_file/reverse_fastq",
                                    "type": [
                                        "null",
                                        "File"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_file/readgroup_meta",
                                    "type": "#readgroup.yml/readgroup_meta"
                                }
                            ]
                        },
                        {
                            "name": "#readgroup.yml/readgroups_bam_file",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#readgroup.yml/readgroups_bam_file/bam",
                                    "type": "File"
                                },
                                {
                                    "name": "#readgroup.yml/readgroups_bam_file/readgroup_meta_list",
                                    "type": {
                                        "type": "array",
                                        "items": "#readgroup.yml/readgroup_meta"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "#readgroup.yml/readgroup_fastq_uuid",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_uuid/forward_fastq_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_uuid/forward_fastq_file_size",
                                    "type": "long"
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_uuid/reverse_fastq_uuid",
                                    "type": [
                                        "null",
                                        "string"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_uuid/reverse_fastq_file_size",
                                    "type": [
                                        "null",
                                        "long"
                                    ]
                                },
                                {
                                    "name": "#readgroup.yml/readgroup_fastq_uuid/readgroup_meta",
                                    "type": "#readgroup.yml/readgroup_meta"
                                }
                            ]
                        },
                        {
                            "name": "#readgroup.yml/readgroups_bam_uuid",
                            "type": "record",
                            "fields": [
                                {
                                    "name": "#readgroup.yml/readgroups_bam_uuid/bam_uuid",
                                    "type": "string"
                                },
                                {
                                    "name": "#readgroup.yml/readgroups_bam_uuid/bam_file_size",
                                    "type": "long"
                                },
                                {
                                    "name": "#readgroup.yml/readgroups_bam_uuid/readgroup_meta_list",
                                    "type": {
                                        "type": "array",
                                        "items": "#readgroup.yml/readgroup_meta"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                    },
                    "id": "#main/amplicon_kit_set_uuid_list"
                },
                {
                    "type": "string",
                    "id": "#main/bam_name"
                },
                {
                    "type": "File",
                    "id": "#main/bioclient_config"
                },
                {
                    "type": "string",
                    "id": "#main/bioclient_load_bucket"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/capture_kit_set_uuid"
                    },
                    "id": "#main/capture_kit_set_uuid_list"
                },
                {
                    "type": "boolean",
                    "id": "#main/collect_wgs_metrics"
                },
                {
                    "type": "long",
                    "id": "#main/common_biallelic_vcf_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/common_biallelic_vcf_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/common_biallelic_vcf_index_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/common_biallelic_vcf_index_gdc_id"
                },
                {
                    "type": "string",
                    "id": "#main/job_uuid"
                },
                {
                    "type": "long",
                    "id": "#main/known_snp_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/known_snp_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/known_snp_index_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/known_snp_index_gdc_id"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_uuid"
                    },
                    "id": "#main/readgroup_fastq_pe_uuid_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_uuid"
                    },
                    "id": "#main/readgroup_fastq_se_uuid_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroups_bam_uuid"
                    },
                    "id": "#main/readgroups_bam_uuid_list"
                },
                {
                    "type": "long",
                    "id": "#main/reference_amb_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_amb_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_ann_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_ann_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_bwt_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_bwt_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_dict_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_dict_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_fa_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_fa_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_fai_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_fai_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_pac_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_pac_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#main/reference_sa_file_size"
                },
                {
                    "type": "string",
                    "id": "#main/reference_sa_gdc_id"
                },
                {
                    "type": "boolean",
                    "id": "#main/run_markduplicates"
                },
                {
                    "type": "long",
                    "id": "#main/thread_count"
                }
            ],
            "steps": [
                {
                    "run": "#emit_json_value.cwl",
                    "in": [
                        {
                            "source": "#main/load_bai/output",
                            "id": "#main/emit_bai_uuid/input"
                        },
                        {
                            "valueFrom": "did",
                            "id": "#main/emit_bai_uuid/key"
                        }
                    ],
                    "out": [
                        "#main/emit_bai_uuid/output"
                    ],
                    "id": "#main/emit_bai_uuid"
                },
                {
                    "run": "#emit_json_value.cwl",
                    "in": [
                        {
                            "source": "#main/load_bam/output",
                            "id": "#main/emit_bam_uuid/input"
                        },
                        {
                            "valueFrom": "did",
                            "id": "#main/emit_bam_uuid/key"
                        }
                    ],
                    "out": [
                        "#main/emit_bam_uuid/output"
                    ],
                    "id": "#main/emit_bam_uuid"
                },
                {
                    "run": "#emit_json_value.cwl",
                    "in": [
                        {
                            "source": "#main/load_sqlite/output",
                            "id": "#main/emit_sqlite_uuid/input"
                        },
                        {
                            "valueFrom": "did",
                            "id": "#main/emit_sqlite_uuid/key"
                        }
                    ],
                    "out": [
                        "#main/emit_sqlite_uuid/output"
                    ],
                    "id": "#main/emit_sqlite_uuid"
                },
                {
                    "run": "#stage_data_workflow.cwl",
                    "in": [
                        {
                            "source": "#main/amplicon_kit_set_uuid_list",
                            "id": "#main/extract_stage_files/amplicon_kit_set_uuid_list"
                        },
                        {
                            "source": "#main/bioclient_config",
                            "id": "#main/extract_stage_files/bioclient_config"
                        },
                        {
                            "source": "#main/capture_kit_set_uuid_list",
                            "id": "#main/extract_stage_files/capture_kit_set_uuid_list"
                        },
                        {
                            "source": "#main/common_biallelic_vcf_file_size",
                            "id": "#main/extract_stage_files/common_biallelic_vcf_file_size"
                        },
                        {
                            "source": "#main/common_biallelic_vcf_gdc_id",
                            "id": "#main/extract_stage_files/common_biallelic_vcf_gdc_id"
                        },
                        {
                            "source": "#main/common_biallelic_vcf_index_file_size",
                            "id": "#main/extract_stage_files/common_biallelic_vcf_index_file_size"
                        },
                        {
                            "source": "#main/common_biallelic_vcf_index_gdc_id",
                            "id": "#main/extract_stage_files/common_biallelic_vcf_index_gdc_id"
                        },
                        {
                            "source": "#main/known_snp_file_size",
                            "id": "#main/extract_stage_files/known_snp_file_size"
                        },
                        {
                            "source": "#main/known_snp_gdc_id",
                            "id": "#main/extract_stage_files/known_snp_gdc_id"
                        },
                        {
                            "source": "#main/known_snp_index_file_size",
                            "id": "#main/extract_stage_files/known_snp_index_file_size"
                        },
                        {
                            "source": "#main/known_snp_index_gdc_id",
                            "id": "#main/extract_stage_files/known_snp_index_gdc_id"
                        },
                        {
                            "source": "#main/readgroups_bam_uuid_list",
                            "id": "#main/extract_stage_files/readgroup_bam_uuid_list"
                        },
                        {
                            "source": "#main/readgroup_fastq_pe_uuid_list",
                            "id": "#main/extract_stage_files/readgroup_fastq_pe_uuid_list"
                        },
                        {
                            "source": "#main/readgroup_fastq_se_uuid_list",
                            "id": "#main/extract_stage_files/readgroup_fastq_se_uuid_list"
                        },
                        {
                            "source": "#main/reference_amb_file_size",
                            "id": "#main/extract_stage_files/reference_amb_file_size"
                        },
                        {
                            "source": "#main/reference_amb_gdc_id",
                            "id": "#main/extract_stage_files/reference_amb_gdc_id"
                        },
                        {
                            "source": "#main/reference_ann_file_size",
                            "id": "#main/extract_stage_files/reference_ann_file_size"
                        },
                        {
                            "source": "#main/reference_ann_gdc_id",
                            "id": "#main/extract_stage_files/reference_ann_gdc_id"
                        },
                        {
                            "source": "#main/reference_bwt_file_size",
                            "id": "#main/extract_stage_files/reference_bwt_file_size"
                        },
                        {
                            "source": "#main/reference_bwt_gdc_id",
                            "id": "#main/extract_stage_files/reference_bwt_gdc_id"
                        },
                        {
                            "source": "#main/reference_dict_file_size",
                            "id": "#main/extract_stage_files/reference_dict_file_size"
                        },
                        {
                            "source": "#main/reference_dict_gdc_id",
                            "id": "#main/extract_stage_files/reference_dict_gdc_id"
                        },
                        {
                            "source": "#main/reference_fa_file_size",
                            "id": "#main/extract_stage_files/reference_fa_file_size"
                        },
                        {
                            "source": "#main/reference_fa_gdc_id",
                            "id": "#main/extract_stage_files/reference_fa_gdc_id"
                        },
                        {
                            "source": "#main/reference_fai_file_size",
                            "id": "#main/extract_stage_files/reference_fai_file_size"
                        },
                        {
                            "source": "#main/reference_fai_gdc_id",
                            "id": "#main/extract_stage_files/reference_fai_gdc_id"
                        },
                        {
                            "source": "#main/reference_pac_file_size",
                            "id": "#main/extract_stage_files/reference_pac_file_size"
                        },
                        {
                            "source": "#main/reference_pac_gdc_id",
                            "id": "#main/extract_stage_files/reference_pac_gdc_id"
                        },
                        {
                            "source": "#main/reference_sa_file_size",
                            "id": "#main/extract_stage_files/reference_sa_file_size"
                        },
                        {
                            "source": "#main/reference_sa_gdc_id",
                            "id": "#main/extract_stage_files/reference_sa_gdc_id"
                        }
                    ],
                    "out": [
                        "#main/extract_stage_files/rg_fastq_pe_files",
                        "#main/extract_stage_files/rg_fastq_se_files",
                        "#main/extract_stage_files/rg_bam_files",
                        "#main/extract_stage_files/amplicon_kit_files",
                        "#main/extract_stage_files/capture_kit_files",
                        "#main/extract_stage_files/reference_fasta",
                        "#main/extract_stage_files/common_biallelic_vcf",
                        "#main/extract_stage_files/known_snp_vcf"
                    ],
                    "id": "#main/extract_stage_files"
                },
                {
                    "run": "#bio_client_upload_pull_uuid.cwl",
                    "in": [
                        {
                            "source": "#main/bioclient_config",
                            "id": "#main/load_bai/config-file"
                        },
                        {
                            "source": "#main/transform/output_bam",
                            "valueFrom": "$(self.secondaryFiles[0])",
                            "id": "#main/load_bai/input"
                        },
                        {
                            "source": "#main/bioclient_load_bucket",
                            "id": "#main/load_bai/upload-bucket"
                        },
                        {
                            "source": "#main/job_uuid",
                            "valueFrom": "$(self)/$(inputs.input.nameroot).bai",
                            "id": "#main/load_bai/upload-key"
                        }
                    ],
                    "out": [
                        "#main/load_bai/output"
                    ],
                    "id": "#main/load_bai"
                },
                {
                    "run": "#bio_client_upload_pull_uuid.cwl",
                    "in": [
                        {
                            "source": "#main/bioclient_config",
                            "id": "#main/load_bam/config-file"
                        },
                        {
                            "source": "#main/transform/output_bam",
                            "id": "#main/load_bam/input"
                        },
                        {
                            "source": "#main/bioclient_load_bucket",
                            "id": "#main/load_bam/upload-bucket"
                        },
                        {
                            "source": "#main/job_uuid",
                            "valueFrom": "$(self)/$(inputs.input.basename)",
                            "id": "#main/load_bam/upload-key"
                        }
                    ],
                    "out": [
                        "#main/load_bam/output"
                    ],
                    "id": "#main/load_bam"
                },
                {
                    "run": "#bio_client_upload_pull_uuid.cwl",
                    "in": [
                        {
                            "source": "#main/bioclient_config",
                            "id": "#main/load_sqlite/config-file"
                        },
                        {
                            "source": "#main/transform/sqlite",
                            "id": "#main/load_sqlite/input"
                        },
                        {
                            "source": "#main/bioclient_load_bucket",
                            "id": "#main/load_sqlite/upload-bucket"
                        },
                        {
                            "source": "#main/job_uuid",
                            "valueFrom": "$(self)/$(inputs.input.basename)",
                            "id": "#main/load_sqlite/upload-key"
                        }
                    ],
                    "out": [
                        "#main/load_sqlite/output"
                    ],
                    "id": "#main/load_sqlite"
                },
                {
                    "run": "#gdc_dnaseq_main_workflow.cwl",
                    "in": [
                        {
                            "source": "#main/extract_stage_files/amplicon_kit_files",
                            "id": "#main/transform/amplicon_kit_set_file_list"
                        },
                        {
                            "source": "#main/bam_name",
                            "id": "#main/transform/bam_name"
                        },
                        {
                            "source": "#main/extract_stage_files/capture_kit_files",
                            "id": "#main/transform/capture_kit_set_file_list"
                        },
                        {
                            "source": "#main/collect_wgs_metrics",
                            "id": "#main/transform/collect_wgs_metrics"
                        },
                        {
                            "source": "#main/extract_stage_files/common_biallelic_vcf",
                            "id": "#main/transform/common_biallelic_vcf"
                        },
                        {
                            "source": "#main/job_uuid",
                            "id": "#main/transform/job_uuid"
                        },
                        {
                            "source": "#main/extract_stage_files/known_snp_vcf",
                            "id": "#main/transform/known_snp"
                        },
                        {
                            "source": "#main/extract_stage_files/rg_fastq_pe_files",
                            "id": "#main/transform/readgroup_fastq_pe_file_list"
                        },
                        {
                            "source": "#main/extract_stage_files/rg_fastq_se_files",
                            "id": "#main/transform/readgroup_fastq_se_file_list"
                        },
                        {
                            "source": "#main/extract_stage_files/rg_bam_files",
                            "id": "#main/transform/readgroups_bam_file_list"
                        },
                        {
                            "source": "#main/extract_stage_files/reference_fasta",
                            "id": "#main/transform/reference_sequence"
                        },
                        {
                            "source": "#main/run_markduplicates",
                            "id": "#main/transform/run_markduplicates"
                        },
                        {
                            "source": "#main/thread_count",
                            "id": "#main/transform/thread_count"
                        }
                    ],
                    "out": [
                        "#main/transform/output_bam",
                        "#main/transform/sqlite"
                    ],
                    "id": "#main/transform"
                }
            ],
            "outputs": [
                {
                    "type": "string",
                    "outputSource": "#main/emit_bai_uuid/output",
                    "id": "#main/indexd_bai_uuid"
                },
                {
                    "type": "string",
                    "outputSource": "#main/emit_bam_uuid/output",
                    "id": "#main/indexd_bam_uuid"
                },
                {
                    "type": "string",
                    "outputSource": "#main/emit_sqlite_uuid/output",
                    "id": "#main/indexd_sqlite_uuid"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#bwa_pe.cwl",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid"
                },
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/reference_sequence"
                },
                {
                    "type": "long",
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/OUTPUT",
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam"
                },
                {
                    "type": "File",
                    "outputSource": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite/destination_sqlite",
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#bam_readgroup_to_json.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam_readgroup_to_json/INPUT"
                        },
                        {
                            "valueFrom": "lenient",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam_readgroup_to_json/MODE"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam_readgroup_to_json/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam_readgroup_to_json"
                },
                {
                    "run": "#bwa_record_pe.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/reference_sequence",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/fasta"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe",
                            "valueFrom": "$(self.forward_fastq)",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/fastq1"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe",
                            "valueFrom": "$(self.reverse_fastq)",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/fastq2"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_basicstats_json/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/fastqc_json_path"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe",
                            "valueFrom": "$(self.readgroup_meta)",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/readgroup_meta"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/thread_count",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/thread_count"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bwa_pe"
                },
                {
                    "run": "#fastqc.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe",
                            "valueFrom": "$(self.forward_fastq)",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc1/INPUT"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/thread_count",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc1/threads"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc1/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc1"
                },
                {
                    "run": "#fastqc.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_fastq_pe",
                            "valueFrom": "$(self.reverse_fastq)",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc2/INPUT"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/thread_count",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc2/threads"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc2/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc2"
                },
                {
                    "run": "#fastqc_basicstatistics_json.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_basicstats_json/sqlite_path"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_basicstats_json/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_basicstats_json"
                },
                {
                    "run": "#fastqc_db.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc1/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/INPUT"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/job_uuid"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/LOG",
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1"
                },
                {
                    "run": "#fastqc_db.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc2/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2/INPUT"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2/job_uuid"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2/LOG",
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2/OUTPUT"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_readgroup_json_db/job_uuid"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/output_sqlite",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_readgroup_json_db/source_sqlite"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_readgroup_json_db/destination_sqlite"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_readgroup_json_db"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite/job_uuid"
                        },
                        {
                            "source": [
                                "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db1/OUTPUT",
                                "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/fastqc_db2/OUTPUT",
                                "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_readgroup_json_db/destination_sqlite"
                            ],
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite/destination_sqlite",
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite/log"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/merge_sqlite"
                },
                {
                    "run": "#readgroup_json_db.cwl",
                    "scatter": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/json_path",
                    "in": [
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/job_uuid",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/job_uuid"
                        },
                        {
                            "source": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/bam_readgroup_to_json/OUTPUT",
                            "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/json_path"
                        }
                    ],
                    "out": [
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/log",
                        "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db/output_sqlite"
                    ],
                    "id": "#bwa_pe.cwl/gdc_dnaseq_bwa_pe_wf/readgroup_json_db"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#bwa_se.cwl",
            "requirements": [
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/job_uuid"
                },
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_fastq_se"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/reference_sequence"
                },
                {
                    "type": "long",
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/OUTPUT",
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam"
                },
                {
                    "type": "File",
                    "outputSource": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite/destination_sqlite",
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#bam_readgroup_to_json.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/OUTPUT",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam_readgroup_to_json/INPUT"
                        },
                        {
                            "valueFrom": "lenient",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam_readgroup_to_json/MODE"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam_readgroup_to_json/OUTPUT"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam_readgroup_to_json"
                },
                {
                    "run": "#bwa_record_se.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/reference_sequence",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/fasta"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_fastq_se",
                            "valueFrom": "$(self.forward_fastq)",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/fastq"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_basicstats_json/OUTPUT",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/fastqc_json_path"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_fastq_se",
                            "valueFrom": "$(self.readgroup_meta)",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/readgroup_meta"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/thread_count",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/thread_count"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se/OUTPUT"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bwa_se"
                },
                {
                    "run": "#fastqc.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_fastq_se",
                            "valueFrom": "$(self.forward_fastq)",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc/INPUT"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/thread_count",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc/threads"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc/OUTPUT"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc"
                },
                {
                    "run": "#fastqc_basicstatistics_json.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/OUTPUT",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_basicstats_json/sqlite_path"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_basicstats_json/OUTPUT"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_basicstats_json"
                },
                {
                    "run": "#fastqc_db.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc/OUTPUT",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/INPUT"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/job_uuid",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/job_uuid"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/LOG",
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/OUTPUT"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/job_uuid",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_readgroup_json_db/job_uuid"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/output_sqlite",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_readgroup_json_db/source_sqlite"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_readgroup_json_db/destination_sqlite"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_readgroup_json_db"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/job_uuid",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite/job_uuid"
                        },
                        {
                            "source": [
                                "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/fastqc_db/OUTPUT",
                                "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_readgroup_json_db/destination_sqlite"
                            ],
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite/destination_sqlite",
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite/log"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/merge_sqlite"
                },
                {
                    "run": "#readgroup_json_db.cwl",
                    "scatter": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/json_path",
                    "in": [
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/job_uuid",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/job_uuid"
                        },
                        {
                            "source": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/bam_readgroup_to_json/OUTPUT",
                            "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/json_path"
                        }
                    ],
                    "out": [
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/log",
                        "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db/output_sqlite"
                    ],
                    "id": "#bwa_se.cwl/gdc_dnaseq_bwa_se_wf/readgroup_json_db"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#extract_amplicon_kit.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "#target_kit_schema.yml/amplicon_kit_set_uuid",
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/amplicon_kit_set_uuid"
                },
                {
                    "type": "File",
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/bioclient_config"
                }
            ],
            "outputs": [
                {
                    "type": "#target_kit_schema.yml/amplicon_kit_set_file",
                    "outputSource": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/emit_amplicon_kit/output",
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/output"
                }
            ],
            "steps": [
                {
                    "run": "#emit_amplicon_kit_file.cwl",
                    "in": [
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_amplicon/output",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/emit_amplicon_kit/amplicon_kit_amplicon_file"
                        },
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_target/output",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/emit_amplicon_kit/amplicon_kit_target_file"
                        }
                    ],
                    "out": [
                        "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/emit_amplicon_kit/output"
                    ],
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/emit_amplicon_kit"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/bioclient_config",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_amplicon/config-file"
                        },
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/amplicon_kit_set_uuid",
                            "valueFrom": "$(self.amplicon_kit_amplicon_uuid)",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_amplicon/download_handle"
                        }
                    ],
                    "out": [
                        "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_amplicon/output"
                    ],
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_amplicon"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/bioclient_config",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_target/config-file"
                        },
                        {
                            "source": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/amplicon_kit_set_uuid",
                            "valueFrom": "$(self.amplicon_kit_target_uuid)",
                            "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_target/download_handle"
                        }
                    ],
                    "out": [
                        "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_target/output"
                    ],
                    "id": "#extract_amplicon_kit.cwl/gdc_dnaseq_extract_amplicon_kit_wf/extract_amplicon_kit_target"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#extract_capture_kit.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/bioclient_config"
                },
                {
                    "type": "#target_kit_schema.yml/capture_kit_set_uuid",
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/capture_kit_set_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "#target_kit_schema.yml/capture_kit_set_file",
                    "outputSource": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/emit_capture_kit/output",
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/output"
                }
            ],
            "steps": [
                {
                    "run": "#emit_capture_kit_file.cwl",
                    "in": [
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_bait/output",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/emit_capture_kit/capture_kit_bait_file"
                        },
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_target/output",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/emit_capture_kit/capture_kit_target_file"
                        }
                    ],
                    "out": [
                        "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/emit_capture_kit/output"
                    ],
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/emit_capture_kit"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/bioclient_config",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_bait/config-file"
                        },
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/capture_kit_set_uuid",
                            "valueFrom": "$(self.capture_kit_bait_uuid)",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_bait/download_handle"
                        }
                    ],
                    "out": [
                        "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_bait/output"
                    ],
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_bait"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/bioclient_config",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_target/config-file"
                        },
                        {
                            "source": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/capture_kit_set_uuid",
                            "valueFrom": "$(self.capture_kit_target_uuid)",
                            "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_target/download_handle"
                        }
                    ],
                    "out": [
                        "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_target/output"
                    ],
                    "id": "#extract_capture_kit.cwl/gdc_dnaseq_extract_capture_kit/extract_capture_kit_target"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#extract_readgroup_fastq_pe.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/bioclient_config"
                },
                {
                    "type": "#readgroup.yml/readgroup_fastq_uuid",
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "outputSource": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file/output",
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/output"
                }
            ],
            "steps": [
                {
                    "run": "#emit_readgroup_fastq_file.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq/output",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file/forward_fastq"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid",
                            "valueFrom": "$(self.readgroup_meta)",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file/readgroup_meta"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq/output",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file/reverse_fastq"
                        }
                    ],
                    "out": [
                        "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file/output"
                    ],
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/emit_readgroup_fastq_pe_file"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/bioclient_config",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq/config-file"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid",
                            "valueFrom": "$(self.forward_fastq_uuid)",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq/download_handle"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid",
                            "valueFrom": "$(self.forward_fastq_file_size)",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq/file_size"
                        }
                    ],
                    "out": [
                        "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq/output"
                    ],
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_forward_fastq"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/bioclient_config",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq/config-file"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid",
                            "valueFrom": "$(self.reverse_fastq_uuid)",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq/download_handle"
                        },
                        {
                            "source": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/readgroup_fastq_pe_uuid",
                            "valueFrom": "$(self.reverse_fastq_file_size)",
                            "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq/file_size"
                        }
                    ],
                    "out": [
                        "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq/output"
                    ],
                    "id": "#extract_readgroup_fastq_pe.cwl/gdc_dnaseq_extract_readgroup_fastq_pe_wf/extract_reverse_fastq"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#extract_readgroup_fastq_se.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/bioclient_config"
                },
                {
                    "type": "#readgroup.yml/readgroup_fastq_uuid",
                    "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/readgroup_fastq_se_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "outputSource": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/emit_readgroup_fastq_se_file/output",
                    "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/output"
                }
            ],
            "steps": [
                {
                    "run": "#emit_readgroup_fastq_file.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq/output",
                            "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/emit_readgroup_fastq_se_file/forward_fastq"
                        },
                        {
                            "source": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/readgroup_fastq_se_uuid",
                            "valueFrom": "$(self.readgroup_meta)",
                            "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/emit_readgroup_fastq_se_file/readgroup_meta"
                        }
                    ],
                    "out": [
                        "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/emit_readgroup_fastq_se_file/output"
                    ],
                    "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/emit_readgroup_fastq_se_file"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/bioclient_config",
                            "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq/config-file"
                        },
                        {
                            "source": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/readgroup_fastq_se_uuid",
                            "valueFrom": "$(self.fastq_uuid)",
                            "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq/download_handle"
                        },
                        {
                            "source": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/readgroup_fastq_se_uuid",
                            "valueFrom": "$(self.fastq_file_size)",
                            "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq/file_size"
                        }
                    ],
                    "out": [
                        "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq/output"
                    ],
                    "id": "#extract_readgroup_fastq_se.cwl/gdc_dnaseq_extract_readgroup_fastq_se_wf/extract_fastq"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#extract_readgroups_bam.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/bioclient_config"
                },
                {
                    "type": "#readgroup.yml/readgroups_bam_uuid",
                    "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/readgroups_bam_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroups_bam_file",
                    "outputSource": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/emit_readgroups_bam_file/output",
                    "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/output"
                }
            ],
            "steps": [
                {
                    "run": "#emit_readgroups_bam_file.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam/output",
                            "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/emit_readgroups_bam_file/bam"
                        },
                        {
                            "source": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/readgroups_bam_uuid",
                            "valueFrom": "$(self.readgroup_meta_list)",
                            "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/emit_readgroups_bam_file/readgroup_meta_list"
                        }
                    ],
                    "out": [
                        "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/emit_readgroups_bam_file/output"
                    ],
                    "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/emit_readgroups_bam_file"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/bioclient_config",
                            "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam/config-file"
                        },
                        {
                            "source": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/readgroups_bam_uuid",
                            "valueFrom": "$(self.bam_uuid)",
                            "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam/download_handle"
                        },
                        {
                            "source": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/readgroups_bam_uuid",
                            "valueFrom": "$(self.bam_file_size)",
                            "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam/file_size"
                        }
                    ],
                    "out": [
                        "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam/output"
                    ],
                    "id": "#extract_readgroups_bam.cwl/gdc_dnaseq_extract_readgroups_bam_wf/extract_bam"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#stage_data_workflow.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                    },
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/amplicon_kit_set_uuid_list"
                },
                {
                    "type": "File",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/capture_kit_set_uuid"
                    },
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/capture_kit_set_uuid_list"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_index_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_index_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_index_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_index_gdc_id"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroups_bam_uuid"
                    },
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_bam_uuid_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_uuid"
                    },
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_fastq_pe_uuid_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_uuid"
                    },
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_fastq_se_uuid_list"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_amb_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_amb_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_ann_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_ann_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_bwt_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_bwt_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_dict_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_dict_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fa_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fa_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fai_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fai_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_pac_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_pac_gdc_id"
                },
                {
                    "type": "long",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_sa_file_size"
                },
                {
                    "type": "string",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_sa_gdc_id"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/amplicon_kit_set_file"
                    },
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/amplicon_kit_files"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/capture_kit_set_file"
                    },
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/capture_kit_files"
                },
                {
                    "type": "File",
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_common_biallelic_vcf_files/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_known_snp_files/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_vcf"
                },
                {
                    "type": "File",
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fasta"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroups_bam_file"
                    },
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/rg_bam_files"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/rg_fastq_pe_files"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs/output",
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/rg_fastq_se_files"
                }
            ],
            "steps": [
                {
                    "run": "#extract_amplicon_kit.cwl",
                    "scatter": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits/amplicon_kit_set_uuid",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/amplicon_kit_set_uuid_list",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits/amplicon_kit_set_uuid"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits/bioclient_config"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_amplicon_kits"
                },
                {
                    "run": "#extract_readgroups_bam.cwl",
                    "scatter": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams/readgroups_bam_uuid",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams/bioclient_config"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_bam_uuid_list",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams/readgroups_bam_uuid"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_bams"
                },
                {
                    "run": "#extract_capture_kit.cwl",
                    "scatter": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits/capture_kit_set_uuid",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits/bioclient_config"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/capture_kit_set_uuid_list",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits/capture_kit_set_uuid"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_capture_kits"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_index_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/common_biallelic_vcf_index_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_index_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/known_snp_index_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index"
                },
                {
                    "run": "#extract_readgroup_fastq_pe.cwl",
                    "scatter": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs/readgroup_fastq_pe_uuid",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs/bioclient_config"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_fastq_pe_uuid_list",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs/readgroup_fastq_pe_uuid"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_pe_fastqs"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_amb_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_amb_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_ann_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_ann_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_bwt_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_bwt_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_dict_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_dict_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fa_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fa_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fai_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_fai_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_pac_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_pac_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac"
                },
                {
                    "run": "#bio_client_download.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa/config-file"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_sa_gdc_id",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa/download_handle"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/reference_sa_file_size",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa/file_size"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa"
                },
                {
                    "run": "#extract_readgroup_fastq_se.cwl",
                    "scatter": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs/readgroup_fastq_se_uuid",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/bioclient_config",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs/bioclient_config"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/readgroup_fastq_se_uuid_list",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs/readgroup_fastq_se_uuid"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_se_fastqs"
                },
                {
                    "run": "#root_vcf.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_common_biallelic_vcf_files/vcf"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_common_biallelic_vcf_index/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_common_biallelic_vcf_files/vcf_index"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_common_biallelic_vcf_files/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_common_biallelic_vcf_files"
                },
                {
                    "run": "#root_fasta_dnaseq.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fa/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_amb/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_amb"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_ann/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_ann"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_bwt/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_bwt"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_dict/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_dict"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_fai/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_fai"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_pac/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_pac"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_reference_sa/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/fasta_sa"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_fasta_files"
                },
                {
                    "run": "#root_vcf.cwl",
                    "in": [
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_known_snp_files/vcf"
                        },
                        {
                            "source": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/extract_known_snp_index/output",
                            "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_known_snp_files/vcf_index"
                        }
                    ],
                    "out": [
                        "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_known_snp_files/output"
                    ],
                    "id": "#stage_data_workflow.cwl/gdc_dnaseq_stage_data_wf/root_known_snp_files"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#gdc_dnaseq_main_workflow.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/amplicon_kit_set_file"
                    },
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/amplicon_kit_set_file_list"
                },
                {
                    "type": "string",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bam_name"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/capture_kit_set_file"
                    },
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/capture_kit_set_file_list"
                },
                {
                    "type": "boolean",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/collect_wgs_metrics"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/common_biallelic_vcf"
                },
                {
                    "type": "string",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/known_snp"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroup_fastq_pe_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroup_fastq_se_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroups_bam_file"
                    },
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_file_list"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/reference_sequence"
                },
                {
                    "type": "boolean",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/run_markduplicates"
                },
                {
                    "type": "long",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/output_bam",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/output_bam"
                },
                {
                    "type": "File",
                    "outputSource": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite/destination_sqlite",
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#bwa_pe.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/readgroup_fastq_pe",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/merged_pe_fastq_array",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/readgroup_fastq_pe"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/reference_sequence",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/reference_sequence"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/thread_count"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/bam",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe"
                },
                {
                    "run": "#bwa_se.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/readgroup_fastq_se",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/merged_se_fastq_array",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/readgroup_fastq_se"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/reference_sequence",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/reference_sequence"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/thread_count"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/bam",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se"
                },
                {
                    "run": "#conditional_markduplicates.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/run_markduplicates",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/out_bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/bam"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bam_name",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/bam_name"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/do_markdup_workflow",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/run_markduplicates"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/thread_count"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/output",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates"
                },
                {
                    "run": "#conditional_skip_markduplicates.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/skip_markduplicates",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/out_bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/bam"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bam_name",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/bam_name"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/skip_markdup_workflow",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/skip_markduplicates"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/thread_count"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/output"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates"
                },
                {
                    "run": "#decider_markdup_input.cwl",
                    "in": [
                        {
                            "source": [
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/bam",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/bam"
                            ],
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/bam"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/run_markduplicates",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/run_markdups"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/do_markdup_workflow",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/skip_markdup_workflow",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider/out_bam"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_branch_decider"
                },
                {
                    "run": "#decider_markdup_output.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/output",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/markdup_bam"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_markduplicates/sqlite",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/markdup_sqlite"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/conditional_skip_markduplicates/output",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/skip_markdup_bam"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/bam",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider"
                },
                {
                    "run": "#fastq_clean.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/input",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroup_fastq_pe_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/input"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/job_uuid"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/output",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe"
                },
                {
                    "run": "#fastq_clean.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/input",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroup_fastq_se_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/input"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/job_uuid"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/output",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se"
                },
                {
                    "run": "#gatk4_applybqsr.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator/output_grp",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/bqsr-recal-file"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/input"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/output_bam"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr"
                },
                {
                    "run": "#gatk4_baserecalibrator.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator/input"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/known_snp",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator/known-sites"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/reference_sequence",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator/reference"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator/output_grp"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_baserecalibrator"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite/job_uuid"
                        },
                        {
                            "source": [
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe/destination_sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se/destination_sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe/destination_sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se/destination_sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/dup_outputs_decider/sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/sqlite",
                                "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/sqlite"
                            ],
                            "valueFrom": "${\n   var res = [];\n   for (var i = 0; i<self.length; i++) {\n     if(self[i] !== null) {\n       res.push(self[i])\n     }\n   }\n   return(res);\n }\n",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite/destination_sqlite",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite/log"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_all_sqlite"
                },
                {
                    "run": "#merge_fastq_array_workflow.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/o1_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/bam_o1_fastqs"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/o2_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/bam_o2_fastqs"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/pe_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/bam_pe_fastqs"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/se_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/bam_se_fastqs"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/output",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/fastqs_pe"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/output",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/fastqs_se"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/merged_pe_fastq_array",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays/merged_se_fastq_array"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_fastq_arrays"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_pe/sqlite",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe/source_sqlite"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe/destination_sqlite",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe/log"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_pe"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/bwa_se/sqlite",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se/source_sqlite"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se/destination_sqlite",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se/log"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_bwa_se"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_pe/sqlite",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe/source_sqlite"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe/destination_sqlite",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe/log"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_pe"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/fastq_clean_se/sqlite",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se/source_sqlite"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se/destination_sqlite",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se/log"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/merge_sqlite_fastq_clean_se"
                },
                {
                    "run": "#metrics.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/amplicon_kit_set_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/amplicon_kit_set_file_list"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/output_bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/bam"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/capture_kit_set_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/capture_kit_set_file_list"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/collect_wgs_metrics",
                            "valueFrom": "${\n   if (self) {\n     return([1]);\n   } else {\n     return([]);\n   }\n }\n",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/collect_wgs_metrics"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/common_biallelic_vcf",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/common_biallelic_vcf"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/reference_sequence",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/fasta"
                        },
                        {
                            "valueFrom": "gatk_applybqsr_readgroups",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/input_state"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/known_snp",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/known_snp"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/thread_count",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/thread_count"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/metrics"
                },
                {
                    "run": "#picard_validatesamfile.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/output_bam",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr/INPUT"
                        },
                        {
                            "valueFrom": "STRICT",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr/VALIDATION_STRINGENCY"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr/OUTPUT"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr"
                },
                {
                    "run": "#picard_validatesamfile_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/gatk_applybqsr/output_bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/bam"
                        },
                        {
                            "valueFrom": "gatk_applybqsr_readgroups",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/input_state"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/job_uuid",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr/OUTPUT",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite/sqlite"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/picard_validatesamfile_bqsr_to_sqlite"
                },
                {
                    "run": "#readgroups_bam_to_readgroups_fastq_lists.cwl",
                    "scatter": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/readgroups_bam_file",
                    "in": [
                        {
                            "source": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_file_list",
                            "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/readgroups_bam_file"
                        }
                    ],
                    "out": [
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/pe_file_list",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/se_file_list",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/o1_file_list",
                        "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists/o2_file_list"
                    ],
                    "id": "#gdc_dnaseq_main_workflow.cwl/gdc_dnaseq_main_wf/readgroups_bam_to_readgroups_fastq_lists"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#amplicon_metrics.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "#target_kit_schema.yml/amplicon_kit_set_file",
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/amplicon_kit_set_file"
                },
                {
                    "type": "File",
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/bam"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/fasta"
                },
                {
                    "type": "string",
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/input_state"
                },
                {
                    "type": "string",
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/job_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/sqlite",
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#picard_collecttargetedpcrmetrics.cwl",
                    "in": [
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/amplicon_kit_set_file",
                            "valueFrom": "$(self.amplicon_kit_amplicon_file)",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/AMPLICON_INTERVALS"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/bam",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/INPUT"
                        },
                        {
                            "default": [
                                "null",
                                "ALL_READS"
                            ],
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/METRIC_ACCUMULATION_LEVEL"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/bam",
                            "valueFrom": "$(self.basename).pcrmetrics",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/OUTPUT"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/fasta",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/REFERENCE_SEQUENCE"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/amplicon_kit_set_file",
                            "valueFrom": "$(self.amplicon_kit_target_file)",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/TARGET_INTERVALS"
                        }
                    ],
                    "out": [
                        "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/METRIC_OUTPUT"
                    ],
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics"
                },
                {
                    "run": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/bam"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/input_state",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/input_state"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/job_uuid",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics/METRIC_OUTPUT",
                            "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/log",
                        "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite/sqlite"
                    ],
                    "id": "#amplicon_metrics.cwl/gdc_dnaseq_amplicon_metrics_wf/picard_collecttargetedpcrmetrics_to_sqlite"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#exome_metrics.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/bam"
                },
                {
                    "type": "#target_kit_schema.yml/capture_kit_set_file",
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/capture_kit_set_file"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/fasta"
                },
                {
                    "type": "string",
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/input_state"
                },
                {
                    "type": "string",
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/job_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/sqlite",
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#picard_collecthsmetrics.cwl",
                    "in": [
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/capture_kit_set_file",
                            "valueFrom": "$(self.capture_kit_bait_file)",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/BAIT_INTERVALS"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/bam",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/INPUT"
                        },
                        {
                            "default": [
                                "null",
                                "ALL_READS"
                            ],
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/METRIC_ACCUMULATION_LEVEL"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/bam",
                            "valueFrom": "$(self.basename).hsmetrics",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/OUTPUT"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/fasta",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/REFERENCE_SEQUENCE"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/capture_kit_set_file",
                            "valueFrom": "$(self.capture_kit_target_file)",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/TARGET_INTERVALS"
                        }
                    ],
                    "out": [
                        "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/METRIC_OUTPUT"
                    ],
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics"
                },
                {
                    "run": "#picard_collecthsmetrics_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/bam"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/input_state",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/input_state"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/job_uuid",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics/METRIC_OUTPUT",
                            "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/log",
                        "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite/sqlite"
                    ],
                    "id": "#exome_metrics.cwl/gdc_dnaseq_exome_metrics_wf/picard_collecthsmetrics_to_sqlite"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#metrics.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                },
                {
                    "class": "SubworkflowFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/amplicon_kit_set_file"
                    },
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_kit_set_file_list"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#target_kit_schema.yml/capture_kit_set_file"
                    },
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/capture_kit_set_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "long"
                    },
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/collect_wgs_metrics"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/common_biallelic_vcf"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta"
                },
                {
                    "type": "string",
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state"
                },
                {
                    "type": "string",
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/known_snp"
                },
                {
                    "type": "long",
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite/destination_sqlite",
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#amplicon_metrics.cwl",
                    "scatter": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/amplicon_kit_set_file",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_kit_set_file_list",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/amplicon_kit_set_file"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/fasta"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/job_uuid"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics"
                },
                {
                    "run": "#exome_metrics.cwl",
                    "scatter": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/capture_kit_set_file",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/capture_kit_set_file_list",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/capture_kit_set_file"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/fasta"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/job_uuid"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics"
                },
                {
                    "run": "#gatk4_calculatecontamination.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.nameroot)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination/bam_nameroot"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries/output",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination/input"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination/output"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination"
                },
                {
                    "run": "#gatk_calculatecontamination_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination/output",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite"
                },
                {
                    "run": "#gatk4_getpileupsummaries.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries/input"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries/reference"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/common_biallelic_vcf",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries/variant"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries/output"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_getpileupsummaries"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/amplicon_metrics/sqlite",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite/destination_sqlite",
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite/log"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/exome_metrics/sqlite",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite/destination_sqlite",
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite/log"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite/job_uuid"
                        },
                        {
                            "source": [
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/gatk_calculatecontamination_to_sqlite/sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_exome_sqlite/destination_sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_amplicon_sqlite/destination_sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite/destination_sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/sqlite",
                                "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/sqlite"
                            ],
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite/destination_sqlite",
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite/log"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_sqlite"
                },
                {
                    "run": "#merge_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/sqlite",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite/source_sqlite"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite/destination_sqlite",
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite/log"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/merge_wgs_sqlite"
                },
                {
                    "run": "#picard_collectoxogmetrics.cwl",
                    "in": [
                        {
                            "default": [
                                "CCG"
                            ],
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/CONTEXTS"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/known_snp",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/DB_SNP"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/INPUT"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/REFERENCE_SEQUENCE"
                        },
                        {
                            "default": "SILENT",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/VALIDATION_STRINGENCY"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/OUTPUT"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics"
                },
                {
                    "run": "#picard_collectoxogmetrics_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/fasta"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics/OUTPUT",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/metric_path"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/known_snp",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/vcf"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/log",
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/picard_collectoxogmetrics_to_sqlite"
                },
                {
                    "run": "#samtools_flagstat.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat/INPUT"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/thread_count",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat/threads"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat/OUTPUT"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat"
                },
                {
                    "run": "#samtools_flagstat_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat/OUTPUT",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_flagstat_to_sqlite"
                },
                {
                    "run": "#samtools_idxstats.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats/INPUT"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats/OUTPUT"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats"
                },
                {
                    "run": "#samtools_idxstats_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats/OUTPUT",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_idxstats_to_sqlite"
                },
                {
                    "run": "#samtools_stats.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats/INPUT"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/thread_count",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats/threads"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats/OUTPUT"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats"
                },
                {
                    "run": "#samtools_stats_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats/OUTPUT",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/samtools_stats_to_sqlite"
                },
                {
                    "run": "#wgs_metrics.cwl",
                    "scatter": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/run_wgs",
                    "in": [
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/bam",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/bam"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/fasta",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/fasta"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/input_state",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/input_state"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/job_uuid",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/job_uuid"
                        },
                        {
                            "source": "#metrics.cwl/gdc_dnaseq_metrics_wf/collect_wgs_metrics",
                            "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/run_wgs"
                        }
                    ],
                    "out": [
                        "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics/sqlite"
                    ],
                    "id": "#metrics.cwl/gdc_dnaseq_metrics_wf/wgs_metrics"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#wgs_metrics.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/bam"
                },
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/fasta"
                },
                {
                    "type": "string",
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/input_state"
                },
                {
                    "type": "string",
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/job_uuid"
                },
                {
                    "type": "long",
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/run_wgs"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/sqlite",
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#picard_collectwgsmetrics.cwl",
                    "in": [
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/bam",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics/INPUT"
                        },
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/fasta",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics/REFERENCE_SEQUENCE"
                        },
                        {
                            "default": "SILENT",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics/VALIDATION_STRINGENCY"
                        }
                    ],
                    "out": [
                        "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics/OUTPUT"
                    ],
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics"
                },
                {
                    "run": "#picard_collectwgsmetrics_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/bam",
                            "valueFrom": "$(self.basename)",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/bam"
                        },
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/fasta",
                            "valueFrom": "$(self.basename)",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/fasta"
                        },
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/input_state",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/input_state"
                        },
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/job_uuid",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics/OUTPUT",
                            "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/log",
                        "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite/sqlite"
                    ],
                    "id": "#wgs_metrics.cwl/gdc_dnaseq_wgs_metrics_wf/picard_collectwgsmetrics_to_sqlite"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#conditional_markduplicates.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam"
                },
                {
                    "type": "string",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam_name"
                },
                {
                    "type": "string",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/job_uuid"
                },
                {
                    "type": "long",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/run_markduplicates"
                },
                {
                    "type": "long",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/index_markdup_bam/output_bam",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/output"
                },
                {
                    "type": "File",
                    "outputSource": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/sqlite",
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#samtools_index.cwl",
                    "in": [
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam/bam",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/index_markdup_bam/input_bam"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/thread_count",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/index_markdup_bam/threads"
                        }
                    ],
                    "out": [
                        "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/index_markdup_bam/output_bam"
                    ],
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/index_markdup_bam"
                },
                {
                    "run": "#picard_markduplicates.cwl",
                    "in": [
                        {
                            "default": "queryname",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/ASSUME_SORT_ORDER"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/INPUT"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam_name",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/OUTBAM"
                        },
                        {
                            "default": "SILENT",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/VALIDATION_STRINGENCY"
                        }
                    ],
                    "out": [
                        "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/OUTPUT",
                        "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/METRICS"
                    ],
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates"
                },
                {
                    "run": "#picard_markduplicates_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam_name",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/bam"
                        },
                        {
                            "valueFrom": "markduplicates_readgroups",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/input_state"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/job_uuid",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/METRICS",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/metric_path"
                        }
                    ],
                    "out": [
                        "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite/sqlite"
                    ],
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates_to_sqlite"
                },
                {
                    "run": "#samtools_sort.cwl",
                    "in": [
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/picard_markduplicates/OUTPUT",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam/input_bam"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/bam_name",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam/output_bam"
                        },
                        {
                            "source": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/thread_count",
                            "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam/threads"
                        }
                    ],
                    "out": [
                        "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam/bam"
                    ],
                    "id": "#conditional_markduplicates.cwl/gdc_dnaseq_conditional_markduplicates_wf/sort_markdup_bam"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#conditional_skip_markduplicates.cwl",
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/bam"
                },
                {
                    "type": "string",
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/bam_name"
                },
                {
                    "type": "string",
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/job_uuid"
                },
                {
                    "type": "long",
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/skip_markduplicates"
                },
                {
                    "type": "long",
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputSource": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles/MERGED_OUTPUT",
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/output"
                }
            ],
            "steps": [
                {
                    "run": "#picard_mergesamfiles.cwl",
                    "in": [
                        {
                            "source": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/bam",
                            "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles/INPUT"
                        },
                        {
                            "source": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/bam_name",
                            "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles/OUTPUT"
                        },
                        {
                            "default": "SILENT",
                            "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles/VALIDATION_STRINGENCY"
                        }
                    ],
                    "out": [
                        "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles/MERGED_OUTPUT"
                    ],
                    "id": "#conditional_skip_markduplicates.cwl/gdc_dnaseq_conditional_skip_markduplicates_wf/picard_mergesamfiles"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#fastq_clean.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ScatterFeatureRequirement"
                },
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/input"
                },
                {
                    "type": "string",
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/job_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "outputSource": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file/output",
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/output"
                },
                {
                    "type": "File",
                    "outputSource": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/sqlite",
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/sqlite"
                }
            ],
            "steps": [
                {
                    "run": "#emit_readgroup_fastq_file.cwl",
                    "in": [
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/cleaned_fastq1",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file/forward_fastq"
                        },
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/input",
                            "valueFrom": "$(self.readgroup_meta)",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file/readgroup_meta"
                        },
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/cleaned_fastq2",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file/reverse_fastq"
                        }
                    ],
                    "out": [
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file/output"
                    ],
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/emit_readgroup_fastq_file"
                },
                {
                    "run": "#fastq_cleaner.cwl",
                    "in": [
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/input",
                            "valueFrom": "$(self.forward_fastq)",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/fastq1"
                        },
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/input",
                            "valueFrom": "$(self.reverse_fastq)",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/fastq2"
                        }
                    ],
                    "out": [
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/cleaned_fastq1",
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/cleaned_fastq2",
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/result_json"
                    ],
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner"
                },
                {
                    "run": "#json_to_sqlite.cwl",
                    "in": [
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/fastq_cleaner/result_json",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/input_json"
                        },
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/job_uuid",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/job_uuid"
                        },
                        {
                            "source": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/input",
                            "valueFrom": "${\n   var res = self.reverse_fastq === null ? \"fastq_cleaner_se\" : \"fastq_cleaner_pe\";\n   return(res);\n }\n",
                            "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/table_name"
                        }
                    ],
                    "out": [
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/sqlite",
                        "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite/log"
                    ],
                    "id": "#fastq_clean.cwl/gdc_dnaseq_fastq_clean_wf/json_to_sqlite"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#merge_fastq_array_workflow.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "#readgroup.yml/readgroup_fastq_file"
                        }
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_o1_fastqs"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "#readgroup.yml/readgroup_fastq_file"
                        }
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_o2_fastqs"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "#readgroup.yml/readgroup_fastq_file"
                        }
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_pe_fastqs"
                },
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "#readgroup.yml/readgroup_fastq_file"
                        }
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_se_fastqs"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/fastqs_pe"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/fastqs_se"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_pe_fastq_records/output",
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merged_pe_fastq_array"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_all_se_fastq_records/output",
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merged_se_fastq_array"
                }
            ],
            "steps": [
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": [
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_se_fastq_records/output",
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o1_fastq_records/output",
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o2_fastq_records/output",
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/fastqs_se"
                            ],
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_all_se_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_all_se_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_all_se_fastq_records"
                },
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_o1_fastqs",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o1_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o1_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o1_fastq_records"
                },
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_o2_fastqs",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o2_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o2_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o2_fastq_records"
                },
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_pe_fastqs",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_pe_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_pe_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_pe_fastq_records"
                },
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/bam_se_fastqs",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_se_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_se_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_se_fastq_records"
                },
                {
                    "run": "#merge_fastq_records.cwl",
                    "in": [
                        {
                            "source": [
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_pe_fastq_records/output",
                                "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/fastqs_pe"
                            ],
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_pe_fastq_records/input"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_pe_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_pe_fastq_records"
                },
                {
                    "run": "#rename_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o1_fastq_records/output",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o1_fastq_records/input"
                        },
                        {
                            "valueFrom": "gdc_bam_o1",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o1_fastq_records/tag"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o1_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o1_fastq_records"
                },
                {
                    "run": "#rename_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_o2_fastq_records/output",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o2_fastq_records/input"
                        },
                        {
                            "valueFrom": "gdc_bam_o2",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o2_fastq_records/tag"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o2_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_o2_fastq_records"
                },
                {
                    "run": "#rename_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_pe_fastq_records/output",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_pe_fastq_records/input"
                        },
                        {
                            "valueFrom": "gdc_bam_pe",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_pe_fastq_records/tag"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_pe_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_pe_fastq_records"
                },
                {
                    "run": "#rename_fastq_records.cwl",
                    "in": [
                        {
                            "source": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/merge_bam_se_fastq_records/output",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_se_fastq_records/input"
                        },
                        {
                            "valueFrom": "gdc_bam_se",
                            "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_se_fastq_records/tag"
                        }
                    ],
                    "out": [
                        "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_se_fastq_records/output"
                    ],
                    "id": "#merge_fastq_array_workflow.cwl/gdc_dnaseq_merge_fastq_array_wf/rename_bam_se_fastq_records"
                }
            ]
        },
        {
            "class": "Workflow",
            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "StepInputExpressionRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "#readgroup.yml/readgroups_bam_file",
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/output",
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/o1_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/output",
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/o2_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/output",
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/pe_file_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "outputSource": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/output",
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/se_file_list"
                }
            ],
            "steps": [
                {
                    "run": "#bam_readgroup_to_contents.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.bam)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/INPUT"
                        },
                        {
                            "valueFrom": "lenient",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/MODE"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/OUTPUT"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents"
                },
                {
                    "run": "#biobambam2_bamtofastq.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.bam)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/filename"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq1",
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq2",
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_o1",
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_o2",
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_s"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq"
                },
                {
                    "run": "#emit_matched_fastq_readgroups.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/OUTPUT",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/bam_readgroup_contents"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_o1",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/forward_fastq_list"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.readgroup_meta_list)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/readgroup_meta_list"
                        },
                        {
                            "default": [],
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/reverse_fastq_list"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents/output"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o1_contents"
                },
                {
                    "run": "#emit_matched_fastq_readgroups.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/OUTPUT",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/bam_readgroup_contents"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_o2",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/forward_fastq_list"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.readgroup_meta_list)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/readgroup_meta_list"
                        },
                        {
                            "default": [],
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/reverse_fastq_list"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents/output"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_o2_contents"
                },
                {
                    "run": "#emit_matched_fastq_readgroups.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/OUTPUT",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/bam_readgroup_contents"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq1",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/forward_fastq_list"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.readgroup_meta_list)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/readgroup_meta_list"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq2",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/reverse_fastq_list"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents/output"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_pe_contents"
                },
                {
                    "run": "#emit_matched_fastq_readgroups.cwl",
                    "in": [
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/bam_readgroup_to_contents/OUTPUT",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/bam_readgroup_contents"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/biobambam_bamtofastq/output_fastq_s",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/forward_fastq_list"
                        },
                        {
                            "source": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/readgroups_bam_file",
                            "valueFrom": "$(self.readgroup_meta_list)",
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/readgroup_meta_list"
                        },
                        {
                            "default": [],
                            "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/reverse_fastq_list"
                        }
                    ],
                    "out": [
                        "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents/output"
                    ],
                    "id": "#readgroups_bam_to_readgroups_fastq_lists.cwl/gdc_dnaseq_readgroups_bam_to_readgroups_fastq_lists_wf/emit_readgroup_se_contents"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bam_readgroup_to_contents.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bam_readgroup_to_json:685e4954df4d70f89315a256ecfb707a2dd80b9fcf0d8d10918398df938c6a28"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--bam_path"
                    },
                    "id": "#bam_readgroup_to_contents.cwl/bam_readgroup_to_contents/INPUT"
                },
                {
                    "type": "string",
                    "default": "strict",
                    "inputBinding": {
                        "prefix": "--mode"
                    },
                    "id": "#bam_readgroup_to_contents.cwl/bam_readgroup_to_contents/MODE"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "outputBinding": {
                        "glob": "*.json",
                        "outputEval": "${\n  var output_array = [];\n  for (var i = 0; i < self.length; i++) {\n    var data = self[i].contents;\n    output_array.push(data);\n  }\n  return output_array;\n}\n",
                        "loadContents": true
                    },
                    "id": "#bam_readgroup_to_contents.cwl/bam_readgroup_to_contents/OUTPUT"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "output.log"
                    },
                    "id": "#bam_readgroup_to_contents.cwl/bam_readgroup_to_contents/log"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bam_readgroup_to_json"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bam_readgroup_to_json.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bam_readgroup_to_json:685e4954df4d70f89315a256ecfb707a2dd80b9fcf0d8d10918398df938c6a28"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--bam_path"
                    },
                    "id": "#bam_readgroup_to_json.cwl/bam_readgroup_to_json/INPUT"
                },
                {
                    "type": "string",
                    "default": "strict",
                    "inputBinding": {
                        "prefix": "--mode"
                    },
                    "id": "#bam_readgroup_to_json.cwl/bam_readgroup_to_json/MODE"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*.json",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#bam_readgroup_to_json.cwl/bam_readgroup_to_json/OUTPUT"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "output.log"
                    },
                    "id": "#bam_readgroup_to_json.cwl/bam_readgroup_to_json/log"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bam_readgroup_to_json"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bio_client_download.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bio_client:latest-foobar"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 2000,
                    "ramMax": 2000,
                    "tmpdirMin": "$(Math.ceil (inputs.file_size / 1048576))",
                    "tmpdirMax": "$(Math.ceil (inputs.file_size / 1048576))",
                    "outdirMin": "$(Math.ceil (inputs.file_size / 1048576))",
                    "outdirMax": "$(Math.ceil (inputs.file_size / 1048576))"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-c",
                        "position": 0
                    },
                    "id": "#bio_client_download.cwl/bio_client_download/config-file"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--dir_path",
                        "position": 99
                    },
                    "id": "#bio_client_download.cwl/bio_client_download/dir_path"
                },
                {
                    "type": "string",
                    "default": "download",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#bio_client_download.cwl/bio_client_download/download"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 98
                    },
                    "id": "#bio_client_download.cwl/bio_client_download/download_handle"
                },
                {
                    "type": "long",
                    "default": 1,
                    "id": "#bio_client_download.cwl/bio_client_download/file_size"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*"
                    },
                    "id": "#bio_client_download.cwl/bio_client_download/output"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bio_client.py"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bio_client_upload_pull_uuid.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bio_client:latest-foobar"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--config-file",
                        "position": 0
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/config-file"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 99
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/input"
                },
                {
                    "type": "string",
                    "default": "upload",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/upload"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--upload-bucket",
                        "position": 2
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/upload-bucket"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--upload_key",
                        "position": 3
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/upload-key"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*_upload.json"
                    },
                    "id": "#bio_client_upload_pull_uuid.cwl/bio_client_upload_pull_uuid/output"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bio_client.py"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#biobambam2_bamtofastq.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/biobambam:533ed9be5fd34b177b5a906262c615bff1a4cdc2c84b78c2244cbd7283842120"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 2000,
                    "ramMax": 2000,
                    "tmpdirMin": "$(Math.ceil(0.9 * inputs.filename.size / 1048576))",
                    "tmpdirMax": "$(Math.ceil(0.9 * inputs.filename.size / 1048576))",
                    "outdirMin": "$(Math.ceil(0.9 * inputs.filename.size / 1048576))",
                    "outdirMax": "$(Math.ceil(0.9 * inputs.filename.size / 1048576))"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "default": "tempfq",
                    "inputBinding": {
                        "prefix": "T=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/T"
                },
                {
                    "type": "int",
                    "default": 1,
                    "inputBinding": {
                        "prefix": "collate=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/collate"
                },
                {
                    "type": "string",
                    "default": "QCFAIL,SECONDARY,SUPPLEMENTARY",
                    "inputBinding": {
                        "prefix": "exclude=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/exclude"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "filename=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/filename"
                },
                {
                    "type": "int",
                    "default": 1,
                    "inputBinding": {
                        "prefix": "gz=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/gz"
                },
                {
                    "type": "string",
                    "default": "bam",
                    "inputBinding": {
                        "prefix": "inputformat=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/inputformat"
                },
                {
                    "type": "int",
                    "default": 5,
                    "inputBinding": {
                        "prefix": "level=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/level"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "outputdir=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputdir"
                },
                {
                    "type": "int",
                    "default": 1,
                    "inputBinding": {
                        "prefix": "outputperreadgroup=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroup"
                },
                {
                    "type": "string",
                    "default": "_1.fq.gz",
                    "inputBinding": {
                        "prefix": "outputperreadgroupsuffixF=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroupsuffixF"
                },
                {
                    "type": "string",
                    "default": "_2.fq.gz",
                    "inputBinding": {
                        "prefix": "outputperreadgroupsuffixF2=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroupsuffixF2"
                },
                {
                    "type": "string",
                    "default": "_o1.fq.gz",
                    "inputBinding": {
                        "prefix": "outputperreadgroupsuffixO=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroupsuffixO"
                },
                {
                    "type": "string",
                    "default": "_o2.fq.gz",
                    "inputBinding": {
                        "prefix": "outputperreadgroupsuffixO2=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroupsuffixO2"
                },
                {
                    "type": "string",
                    "default": "_s.fq.gz",
                    "inputBinding": {
                        "prefix": "outputperreadgroupsuffixS=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/outputperreadgroupsuffixS"
                },
                {
                    "type": "int",
                    "default": 1,
                    "inputBinding": {
                        "prefix": "tryoq=",
                        "separate": false
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/tryoq"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_1.fq.gz",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/output_fastq1"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_2.fq.gz",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/output_fastq2"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_o1.fq.gz",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/output_fastq_o1"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_o2.fq.gz",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/output_fastq_o2"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "outputBinding": {
                        "glob": "*_s.fq.gz",
                        "outputEval": "${ return self.sort(function(a,b) { return a.location > b.location ? 1 : (a.location < b.location ? -1 : 0) }) }\n"
                    },
                    "id": "#biobambam2_bamtofastq.cwl/biobambam2_bamtofastq/output_fastq_s"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/bamtofastq"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bwa_record_pe.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bwa:6f48348ec54042c9bb420ea5e28eea8f62a81c15b44800673bdfece1f379591b"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.thread_count)",
                    "coresMax": "$(inputs.thread_count)",
                    "ramMin": 10000,
                    "ramMax": 10000,
                    "tmpdirMin": "$(Math.ceil(2 * (inputs.fastq1.size + inputs.fastq2.size) / 1048576))",
                    "tmpdirMax": "$(Math.ceil(2 * (inputs.fastq1.size + inputs.fastq2.size) / 1048576))",
                    "outdirMin": "$(Math.ceil(2 * (inputs.fastq1.size + inputs.fastq2.size) / 1048576))",
                    "outdirMax": "$(Math.ceil(2 * (inputs.fastq1.size + inputs.fastq2.size) / 1048576))"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".pac",
                        ".sa"
                    ],
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/fasta"
                },
                {
                    "type": "File",
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/fastq1"
                },
                {
                    "type": "File",
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/fastq2"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "loadContents": true,
                        "valueFrom": "$(null)"
                    },
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/fastqc_json_path"
                },
                {
                    "type": "#readgroup.yml/readgroup_meta",
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/readgroup_meta"
                },
                {
                    "type": "long",
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.fastq1.nameroot.split('_').slice(0,4).join('_') + \".bam\")"
                    },
                    "id": "#bwa_record_pe.cwl/bwa_record_pe/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "${\n  function to_rg() {\n    var readgroup_str = \"@RG\";\n    var keys = Object.keys(inputs.readgroup_meta).sort();\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = inputs.readgroup_meta[key];\n      if (key.length == 2 && value != null) {\n        readgroup_str = readgroup_str + \"\\\\t\" + key + \":\" + value;\n      }\n    }\n    return readgroup_str\n  }\n\n  function bwa_aln_33(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"aln\", \"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq1.path, \">\", \"aln.sai1\", \"&&\",\n    \"bwa\", \"aln\", \"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq2.path, \">\", \"aln.sai2\", \"&&\",\n    \"bwa\", \"sampe\", \"-r\", \"\\\"\" + rg_str + \"\\\"\", inputs.fasta.path, \"aln.sai1\", \"aln.sai2\", inputs.fastq1.path, inputs.fastq2.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  function bwa_aln_64(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"aln\", \"-I\",\"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq1.path, \">\", \"aln.sai1\", \"&&\",\n    \"bwa\", \"aln\", \"-I\", \"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq2.path, \">\", \"aln.sai2\", \"&&\",\n    \"bwa\", \"sampe\", \"-r\", \"\\\"\" + rg_str + \"\\\"\", inputs.fasta.path, \"aln.sai1\", \"aln.sai2\", inputs.fastq1.path, inputs.fastq2.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  function bwa_mem(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"mem\", \"-t\", inputs.thread_count, \"-T\", \"0\", \"-R\", \"\\\"\" + rg_str + \"\\\"\",\n    inputs.fasta.path, inputs.fastq1.path, inputs.fastq2.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  var MEM_ALN_CUTOFF = 70;\n  var fastqc_json = JSON.parse(inputs.fastqc_json_path.contents);\n  var readlength = fastqc_json[inputs.fastq1.basename][\"Sequence length\"];\n  var encoding = fastqc_json[inputs.fastq1.basename][\"Encoding\"];\n  var rg_str = to_rg();\n\n  var outbam = inputs.fastq1.nameroot.split('_').slice(0,4).join('_') + \".bam\";\n\n  if (encoding == \"Illumina 1.3\" || encoding == \"Illumina 1.5\") {\n    return bwa_aln_64(rg_str, outbam)\n  } else if (encoding == \"Sanger / Illumina 1.9\") {\n    if (readlength < MEM_ALN_CUTOFF) {\n      return bwa_aln_33(rg_str, outbam)\n    }\n    else {\n      return bwa_mem(rg_str, outbam)\n    }\n  } else {\n    return\n  }\n\n}\n"
                }
            ],
            "baseCommand": [
                "bash",
                "-c"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#bwa_record_se.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/bwa:6f48348ec54042c9bb420ea5e28eea8f62a81c15b44800673bdfece1f379591b"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "ShellCommandRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.thread_count)",
                    "coresMax": "$(inputs.thread_count)",
                    "ramMin": 10000,
                    "ramMax": 10000,
                    "tmpdirMin": "$(Math.ceil(2 * (inputs.fastq.size) / 1048576))",
                    "tmpdirMax": "$(Math.ceil(2 * (inputs.fastq.size) / 1048576))",
                    "outdirMin": "$(Math.ceil(2 * (inputs.fastq.size) / 1048576))",
                    "outdirMax": "$(Math.ceil(2 * (inputs.fastq.size) / 1048576))"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".pac",
                        ".sa"
                    ],
                    "id": "#bwa_record_se.cwl/bwa_record_se/fasta"
                },
                {
                    "type": "File",
                    "id": "#bwa_record_se.cwl/bwa_record_se/fastq"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "loadContents": true,
                        "valueFrom": "$(null)"
                    },
                    "id": "#bwa_record_se.cwl/bwa_record_se/fastqc_json_path"
                },
                {
                    "type": "#readgroup.yml/readgroup_meta",
                    "id": "#bwa_record_se.cwl/bwa_record_se/readgroup_meta"
                },
                {
                    "type": "long",
                    "default": 3,
                    "id": "#bwa_record_se.cwl/bwa_record_se/samse_maxOcc"
                },
                {
                    "type": "long",
                    "id": "#bwa_record_se.cwl/bwa_record_se/thread_count"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.fastq.nameroot.split('_').slice(0,4).join('_') + \".bam\")"
                    },
                    "id": "#bwa_record_se.cwl/bwa_record_se/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "${\n  function to_rg() {\n    var readgroup_str = \"@RG\";\n    var keys = Object.keys(inputs.readgroup_meta).sort();\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = inputs.readgroup_meta[key];\n      if (key.length == 2 && value != null) {\n        readgroup_str = readgroup_str + \"\\\\t\" + key + \":\" + value;\n      }\n    }\n    return readgroup_str\n  }\n\n  function bwa_aln_33(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"aln\", \"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq.path, \">\", \"aln.sai\", \"&&\",\n    \"bwa\", \"samse\", \"-n\", inputs.samse_maxOcc, \"-r\", \"\\\"\" + rg_str + \"\\\"\", inputs.fasta.path, \"aln.sai\", inputs.fastq.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  function bwa_aln_64(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"aln\", \"-I\",\"-t\", inputs.thread_count, inputs.fasta.path, inputs.fastq.path, \">\", \"aln.sai\", \"&&\",\n    \"bwa\", \"samse\", \"-n\", inputs.samse_maxOcc, \"-r\", \"\\\"\" + rg_str + \"\\\"\", inputs.fasta.path, \"aln.sai\", inputs.fastq.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  function bwa_mem(rg_str, outbam) {\n    var cmd = [\n    \"bwa\", \"mem\", \"-t\", inputs.thread_count, \"-T\", \"0\", \"-R\", \"\\\"\" + rg_str + \"\\\"\",\n    inputs.fasta.path, inputs.fastq.path, \"|\",\n    \"samtools\", \"view\", \"-Shb\", \"-o\", outbam, \"-\"\n    ];\n    return cmd.join(' ')\n  }\n\n  var MEM_ALN_CUTOFF = 70;\n  var fastqc_json = JSON.parse(inputs.fastqc_json_path.contents);\n  var readlength = fastqc_json[inputs.fastq.basename][\"Sequence length\"];\n  var encoding = fastqc_json[inputs.fastq.basename][\"Encoding\"];\n  var rg_str = to_rg();\n\n  var outbam = inputs.fastq.nameroot.split('_').slice(0,4).join('_') + \".bam\";\n\n  if (encoding == \"Illumina 1.3\" || encoding == \"Illumina 1.5\") {\n    return bwa_aln_64(rg_str, outbam)\n  } else if (encoding == \"Sanger / Illumina 1.9\") {\n    if (readlength < MEM_ALN_CUTOFF) {\n      return bwa_aln_33(rg_str, outbam)\n    }\n    else {\n      return bwa_mem(rg_str, outbam)\n    }\n  } else {\n    return\n  }\n\n}\n"
                }
            ],
            "baseCommand": [
                "bash",
                "-c"
            ]
        },
        {
            "class": "ExpressionTool",
            "id": "#decider_markdup_input.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "File"
                        }
                    },
                    "id": "#decider_markdup_input.cwl/decider_markdup_input/bam"
                },
                {
                    "type": "boolean",
                    "id": "#decider_markdup_input.cwl/decider_markdup_input/run_markdups"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "long"
                    },
                    "id": "#decider_markdup_input.cwl/decider_markdup_input/do_markdup_workflow"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#decider_markdup_input.cwl/decider_markdup_input/out_bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "long"
                    },
                    "id": "#decider_markdup_input.cwl/decider_markdup_input/skip_markdup_workflow"
                }
            ],
            "expression": "${\n   var bams = [];\n   for(var i = 0; i < inputs.bam.length; i++) {\n     for(var j = 0; j < inputs.bam[i].length; j++) {\n       if(inputs.bam[i][j].size > 0) {\n         bams.push(inputs.bam[i][j])\n       }\n     }\n   }\n\n   if( inputs.run_markdups ) {\n     return({\n       'do_markdup_workflow': [1],\n       'skip_markdup_workflow': [],\n       'out_bam': bams\n     });\n   } else {\n     return({\n       'do_markdup_workflow': [],\n       'skip_markdup_workflow': [1],\n       'out_bam': bams\n     });\n   }\n }\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#decider_markdup_output.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#decider_markdup_output.cwl/decider_markdup_output/markdup_bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#decider_markdup_output.cwl/decider_markdup_output/markdup_sqlite"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#decider_markdup_output.cwl/decider_markdup_output/skip_markdup_bam"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#decider_markdup_output.cwl/decider_markdup_output/bam"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#decider_markdup_output.cwl/decider_markdup_output/sqlite"
                }
            ],
            "expression": "${\n   if(inputs.markdup_bam.length == 1) {\n     return({'bam': inputs.markdup_bam[0],\n             'sqlite': inputs.markdup_sqlite[0]});\n   } else if(inputs.skip_markdup_bam.length == 1) {\n     return({'bam': inputs.skip_markdup_bam[0],\n             'sqlite': null})\n   } else {\n     throw \"Either markdup bam or skip markdup bam arrays have to be length 1\"\n   }\n }\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_amplicon_kit_file.cwl",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#emit_amplicon_kit_file.cwl/emit_amplicon_kit_file/amplicon_kit_amplicon_file"
                },
                {
                    "type": "File",
                    "id": "#emit_amplicon_kit_file.cwl/emit_amplicon_kit_file/amplicon_kit_target_file"
                }
            ],
            "outputs": [
                {
                    "type": "#target_kit_schema.yml/amplicon_kit_set_file",
                    "id": "#emit_amplicon_kit_file.cwl/emit_amplicon_kit_file/output"
                }
            ],
            "expression": "${\n  var output = {'amplicon_kit_amplicon_file': inputs.amplicon_kit_amplicon_file,\n                'amplicon_kit_target_file': inputs.amplicon_kit_target_file};\n  return {'output': output};\n}\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_capture_kit_file.cwl",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/amplicon_kit_set_uuid"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_file"
                        },
                        {
                            "$import": "#target_kit_schema.yml/capture_kit_set_uuid"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#emit_capture_kit_file.cwl/emit_capture_kit_file/capture_kit_bait_file"
                },
                {
                    "type": "File",
                    "id": "#emit_capture_kit_file.cwl/emit_capture_kit_file/capture_kit_target_file"
                }
            ],
            "outputs": [
                {
                    "type": "#target_kit_schema.yml/capture_kit_set_file",
                    "id": "#emit_capture_kit_file.cwl/emit_capture_kit_file/output"
                }
            ],
            "expression": "${\n  var output = {'capture_kit_bait_file': inputs.capture_kit_bait_file,\n                'capture_kit_target_file': inputs.capture_kit_target_file};\n  return {'output': output};\n}\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_json_value.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "loadContents": true
                    },
                    "id": "#emit_json_value.cwl/emit_json_value/input"
                },
                {
                    "type": "string",
                    "id": "#emit_json_value.cwl/emit_json_value/key"
                }
            ],
            "outputs": [
                {
                    "type": "string",
                    "id": "#emit_json_value.cwl/emit_json_value/output"
                }
            ],
            "expression": "${\n  var output_value = JSON.parse(inputs.input.contents)[inputs.key];\n  return {'output': output_value};\n}\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_matched_fastq_readgroups.cwl",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string"
                    },
                    "id": "#emit_matched_fastq_readgroups.cwl/emit_matched_fastq_readgroups/bam_readgroup_contents"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#emit_matched_fastq_readgroups.cwl/emit_matched_fastq_readgroups/forward_fastq_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_meta"
                    },
                    "id": "#emit_matched_fastq_readgroups.cwl/emit_matched_fastq_readgroups/readgroup_meta_list"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File"
                    },
                    "id": "#emit_matched_fastq_readgroups.cwl/emit_matched_fastq_readgroups/reverse_fastq_list"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#emit_matched_fastq_readgroups.cwl/emit_matched_fastq_readgroups/output"
                }
            ],
            "expression": "${\n    // /begin chakrit / CC-BY-SA-4.0\n    // https://stackoverflow.com/a/2548133/810957\n    function endsWith(str, suffix) {\n      return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n    // /end chakrit / CC-BY-SA-4.0\n\n    // /begin 3DFace / CC-BY-SA-4.0\n    // https://stackoverflow.com/questions/3820381/need-a-basename-function-in-javascript#comment29942319_15270931\n    function local_basename(path) {\n      var basename = decodeURIComponent(path.split(/[\\\\/]/).pop());\n      return basename\n    }\n    // /end 3DFace / CC-BY-SA-4.0\n\n    function get_slice_number(fastq_name) {\n      if (endsWith(fastq_name, '_1.fq.gz')) {\n        return -8\n      }\n      else if (endsWith(fastq_name, '_s.fq.gz')) {\n        return -8\n      }\n      else if (endsWith(fastq_name, '_o1.fq.gz')) {\n        return -9\n      }\n      else if (endsWith(fastq_name, '_o2.fq.gz')) {\n        return -9\n      }\n      else {\n        throw \"not recognized fastq suffix\"\n      }\n    }\n\n    // get readgroup name from fastq\n    function fastq_to_rg_id(fq_file_object) {\n      var fastq_name = local_basename(fq_file_object.location);\n      var slice_number = get_slice_number(fastq_name);\n      var readgroup_name = fastq_name.slice(0,slice_number);\n      return readgroup_name;\n    }\n\n    function load_bamrgs() {\n      var res = [];\n      for (var i = 0; i < inputs.bam_readgroup_contents.length; i++) {\n        var curr = JSON.parse(inputs.bam_readgroup_contents[i]);\n        res.push(curr);\n      }\n      return(res);\n    }\n\n    function find_graph_rg(bam_rgid) {\n      for (var i = 0; i < inputs.readgroup_meta_list.length; i++) {\n        var record = inputs.readgroup_meta_list[i];\n        if (record[\"ID\"] === bam_rgid) {\n          return(record);\n        }\n      }\n      return(null);\n    }\n\n    function find_bam_rg(bam_meta, rgid) {\n      for (var i = 0; i < bam_meta.length; i++) {\n        var record = bam_meta[i];\n        if (record[\"ID\"] === rgid) {\n          return(record);\n        }\n      }\n      return(null);\n    }\n\n    function make_record(readgroup_meta, forward_fastq, reverse_fastq) {\n      var output = {\"forward_fastq\": forward_fastq,\n                    \"reverse_fastq\": reverse_fastq,\n                    \"readgroup_meta\": readgroup_meta};\n      output.forward_fastq.format = \"edam:format_2182\";\n      if(reverse_fastq !== null) {\n        output.reverse_fastq.format = \"edam:format_2182\";\n      }\n      return(output);\n    }\n\n    function normalize_record(record) {\n      // first meta_rg has right sample\n      var first_rg = inputs.readgroup_meta_list[0];\n      var first_sm = first_rg['SM'];\n      var first_pl = first_rg['PL'].toUpperCase();\n\n      if(!record.readgroup_meta.hasOwnProperty('SM') || record.readgroup_meta['SM'] !== first_sm) {\n        record.readgroup_meta['SM'] = first_sm;\n      }\n\n      if(!record.readgroup_meta.hasOwnProperty('LB') || record.readgroup_meta['LB'] === null) {\n        record.readgroup_meta['LB'] = first_sm;\n      }\n\n      if(!record.readgroup_meta.hasOwnProperty('PL') || record.readgroup_meta['PL'] === null) {\n        record.readgroup_meta['PL'] = first_pl;\n      } else {\n        record.readgroup_meta['PL'] = record.readgroup_meta['PL'].toUpperCase();\n      }\n    }\n\n    // output\n    var output_array = [];\n\n    // bam rgs\n    var bam_meta = load_bamrgs();\n\n    // get readgroup names from fastq, lookup in graph, lookup in bam meta\n    // if needed.\n    for (var i = 0; i < inputs.forward_fastq_list.length; i++) {\n      var fq = inputs.forward_fastq_list[i];\n      var rev_fq = inputs.reverse_fastq_list.length > 0 ? inputs.reverse_fastq_list[i] : null;\n      var readgroup_name = fastq_to_rg_id(fq);\n\n      // try to look up in the graph metadata using rgname as both rgid and rgpu\n      var graph_rg = find_graph_rg(readgroup_name);\n      if (graph_rg !== null) {\n        var rec = make_record(graph_rg, fq, rev_fq);\n        normalize_record(rec);\n        output_array.push(rec);\n      }\n      else {\n        // Match with bam meta, try to lookup from PU if possible\n        var bam_rg = find_bam_rg(bam_meta, readgroup_name);\n        if(bam_rg === null) {\n          throw \"Unable to find the matching bam RG record\";\n        }\n        var rec = make_record(bam_rg, fq, rev_fq);\n        normalize_record(rec);\n        output_array.push(rec);\n      }\n    }\n    return {'output': output_array};\n  }\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_readgroup_fastq_file.cwl",
            "requirements": [
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#emit_readgroup_fastq_file.cwl/emit_readgroup_fastq_file/forward_fastq"
                },
                {
                    "type": "#readgroup.yml/readgroup_meta",
                    "id": "#emit_readgroup_fastq_file.cwl/emit_readgroup_fastq_file/readgroup_meta"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "id": "#emit_readgroup_fastq_file.cwl/emit_readgroup_fastq_file/reverse_fastq"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroup_fastq_file",
                    "id": "#emit_readgroup_fastq_file.cwl/emit_readgroup_fastq_file/output"
                }
            ],
            "expression": "${\n  if( inputs.reverse_fastq ) {\n      var output = { \"forward_fastq\": inputs.forward_fastq,\n                     \"reverse_fastq\": inputs.reverse_fastq,\n                     \"readgroup_meta\": inputs.readgroup_meta\n                     };\n      output.forward_fastq.format = \"edam:format_2182\";\n      output.reverse_fastq.format = \"edam:format_2182\";\n  }\n  else {\n      var output = { \"forward_fastq\": inputs.forward_fastq,\n                     \"readgroup_meta\": inputs.readgroup_meta\n                     };\n      output.forward_fastq.format = \"edam:format_2182\";\n  }\n  return {'output': output}\n}\n"
        },
        {
            "class": "ExpressionTool",
            "id": "#emit_readgroups_bam_file.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#emit_readgroups_bam_file.cwl/emit_readgroups_bam_file/bam"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_meta"
                    },
                    "id": "#emit_readgroups_bam_file.cwl/emit_readgroups_bam_file/readgroup_meta_list"
                }
            ],
            "outputs": [
                {
                    "type": "#readgroup.yml/readgroups_bam_file",
                    "id": "#emit_readgroups_bam_file.cwl/emit_readgroups_bam_file/output"
                }
            ],
            "expression": "${\n  var output = { \"bam\": inputs.bam,\n                 \"readgroup_meta_list\": inputs.readgroup_meta_list};\n  output.bam.format = \"edam:format_2572\";\n  return {'output': output}\n}\n"
        },
        {
            "class": "CommandLineTool",
            "id": "#fastq_cleaner.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/fastq_cleaner:69c602582f0f001269b4f85a610ae4d5af1edd1809c0edda6a3ae13053e62ce3"
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "function sum_file_array_size(farr) {\n  var divisor = 1048576;\n  var total = 0;\n  for (var i = 0; i<farr.length; i++) {\n    total += farr[i].size\n  }\n  return Math.ceil(total / divisor);\n}\n",
                        "function file_size_multiplier(fobj, mult) {\n  mult = typeof mult !== 'undefined' ? mult : 1;\n  var divisor = 1048576;\n  return Math.ceil(mult * fobj.size / divisor);\n}\n",
                        "function fastq_files_size(forward, reverse) {\n  var divisor = 1048576;\n  if (reverse == null) {\n    return Math.ceil(forward.size / divisor)\n  } else {\n    return Math.ceil((forward.size + reverse.size) / divisor)\n  }\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 2,
                    "coresMax": 2,
                    "ramMin": 2000,
                    "ramMax": 2000,
                    "tmpdirMin": "$(Math.ceil(1.1 * fastq_files_size(inputs.fastq1, inputs.fastq2)))",
                    "tmpdirMax": "$(Math.ceil(1.1 * fastq_files_size(inputs.fastq1, inputs.fastq2)))",
                    "outdirMin": "$(Math.ceil(1.1 * fastq_files_size(inputs.fastq1, inputs.fastq2)))",
                    "outdirMax": "$(Math.ceil(1.1 * fastq_files_size(inputs.fastq1, inputs.fastq2)))"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--fastq"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/fastq1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--fastq2"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/fastq2"
                },
                {
                    "type": "long",
                    "default": 500000,
                    "inputBinding": {
                        "prefix": "--reads_in_memory"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/reads_in_memory"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.fastq1.basename)"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/cleaned_fastq1"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "outputBinding": {
                        "glob": "${\n   var res = inputs.fastq2 === null ? null : inputs.fastq2.basename;\n   return res;\n }\n"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/cleaned_fastq2"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "result.json"
                    },
                    "id": "#fastq_cleaner.cwl/fastq_cleaner/result_json"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/fastq_cleaner"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#fastqc.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/fastqc:27ec215ea82bd62a76ec86f9c8a692010cc0c99169e68d2fa0c0052450321f57"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.threads)",
                    "coresMax": "$(inputs.threads)",
                    "ramMin": 5000,
                    "ramMax": 5000,
                    "tmpdirMin": 50,
                    "tmpdirMax": 50,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 99
                    },
                    "id": "#fastqc.cwl/fastqc/INPUT"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--adapters"
                    },
                    "id": "#fastqc.cwl/fastqc/adapters"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--casava"
                    },
                    "id": "#fastqc.cwl/fastqc/casava"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--contaminants"
                    },
                    "id": "#fastqc.cwl/fastqc/contaminants"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--dir"
                    },
                    "id": "#fastqc.cwl/fastqc/dir"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--extract"
                    },
                    "id": "#fastqc.cwl/fastqc/extract"
                },
                {
                    "type": "string",
                    "default": "fastq",
                    "inputBinding": {
                        "prefix": "--format"
                    },
                    "id": "#fastqc.cwl/fastqc/format"
                },
                {
                    "type": "long",
                    "default": 7,
                    "inputBinding": {
                        "prefix": "--kmers"
                    },
                    "id": "#fastqc.cwl/fastqc/kmers"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "--limits"
                    },
                    "id": "#fastqc.cwl/fastqc/limits"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--nano"
                    },
                    "id": "#fastqc.cwl/fastqc/nano"
                },
                {
                    "type": "boolean",
                    "default": true,
                    "inputBinding": {
                        "prefix": "--noextract"
                    },
                    "id": "#fastqc.cwl/fastqc/noextract"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--nofilter"
                    },
                    "id": "#fastqc.cwl/fastqc/nofilter"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--nogroup"
                    },
                    "id": "#fastqc.cwl/fastqc/nogroup"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--outdir"
                    },
                    "id": "#fastqc.cwl/fastqc/outdir"
                },
                {
                    "type": "boolean",
                    "default": false,
                    "inputBinding": {
                        "prefix": "--quiet"
                    },
                    "id": "#fastqc.cwl/fastqc/quiet"
                },
                {
                    "type": "long",
                    "default": 1,
                    "inputBinding": {
                        "prefix": "--threads"
                    },
                    "id": "#fastqc.cwl/fastqc/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "*_fastqc.zip"
                    },
                    "id": "#fastqc.cwl/fastqc/OUTPUT"
                }
            ],
            "baseCommand": [
                "/usr/local/FastQC/fastqc"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#fastqc_basicstatistics_json.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/fastqc_to_json:0ebd446f08d9eb6ed5b069e9ae53ad822236dc56bb1154f9df0e0c22b5724ae7"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--sqlite_path"
                    },
                    "id": "#fastqc_basicstatistics_json.cwl/fastqc_basicstatistics_json/sqlite_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "fastqc.json"
                    },
                    "id": "#fastqc_basicstatistics_json.cwl/fastqc_basicstatistics_json/OUTPUT"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/fastqc_to_json"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#fastqc_db.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/fastqc_db:3383ae9c9beaf905682b21cab14d20b3bc4fc738c7e1e126da99dc288ba016ac"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 100,
                    "tmpdirMax": 100,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--INPUT"
                    },
                    "id": "#fastqc_db.cwl/fastqc_db/INPUT"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#fastqc_db.cwl/fastqc_db/job_uuid"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".log\")"
                    },
                    "id": "#fastqc_db.cwl/fastqc_db/LOG"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.nameroot + \".db\")"
                    },
                    "id": "#fastqc_db.cwl/fastqc_db/OUTPUT"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/fastqc_db"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#gatk4_applybqsr.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/gatk:4.2.4.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--bqsr-recal-file"
                    },
                    "id": "#gatk4_applybqsr.cwl/gatk4_applybqsr/bqsr-recal-file"
                },
                {
                    "type": [
                        {
                            "type": "enum",
                            "symbols": [
                                "#gatk4_applybqsr.cwl/gatk4_applybqsr/emit-original-quals/true",
                                "#gatk4_applybqsr.cwl/gatk4_applybqsr/emit-original-quals/false"
                            ]
                        }
                    ],
                    "default": "true",
                    "inputBinding": {
                        "prefix": "--emit-original-quals"
                    },
                    "id": "#gatk4_applybqsr.cwl/gatk4_applybqsr/emit-original-quals"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--input"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#gatk4_applybqsr.cwl/gatk4_applybqsr/input"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--tmp-dir"
                    },
                    "id": "#gatk4_applybqsr.cwl/gatk4_applybqsr/tmp_dir"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.input.basename)"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#gatk4_applybqsr.cwl/gatk4_applybqsr/output_bam"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.input.basename)",
                    "prefix": "--output"
                }
            ],
            "baseCommand": [
                "ApplyBQSR"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#gatk4_baserecalibrator.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/gatk:4.2.4.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--input"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#gatk4_baserecalibrator.cwl/gatk4_baserecalibrator/input"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--known-sites"
                    },
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#gatk4_baserecalibrator.cwl/gatk4_baserecalibrator/known-sites"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--reference"
                    },
                    "secondaryFiles": [
                        ".fai",
                        "^.dict"
                    ],
                    "id": "#gatk4_baserecalibrator.cwl/gatk4_baserecalibrator/reference"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--tmp-dir"
                    },
                    "id": "#gatk4_baserecalibrator.cwl/gatk4_baserecalibrator/tmp_dir"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.input.nameroot + \"_bqsr.grp\")"
                    },
                    "id": "#gatk4_baserecalibrator.cwl/gatk4_baserecalibrator/output_grp"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.input.nameroot + \"_bqsr.grp\")",
                    "prefix": "--output",
                    "separate": true
                }
            ],
            "baseCommand": [
                "BaseRecalibrator"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#gatk4_calculatecontamination.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/gatk:4.2.4.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "id": "#gatk4_calculatecontamination.cwl/gatk4_calculatecontamination/bam_nameroot"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--input"
                    },
                    "id": "#gatk4_calculatecontamination.cwl/gatk4_calculatecontamination/input"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--tmp-dir"
                    },
                    "id": "#gatk4_calculatecontamination.cwl/gatk4_calculatecontamination/tmp_dir"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam_nameroot + \"_contamination.table\")"
                    },
                    "id": "#gatk4_calculatecontamination.cwl/gatk4_calculatecontamination/output"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.bam_nameroot + \"_contamination.table\")",
                    "prefix": "--output",
                    "separate": true
                }
            ],
            "baseCommand": [
                "CalculateContamination"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#gatk4_getpileupsummaries.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/gatk:4.2.4.1"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--input"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#gatk4_getpileupsummaries.cwl/gatk4_getpileupsummaries/input"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-R"
                    },
                    "id": "#gatk4_getpileupsummaries.cwl/gatk4_getpileupsummaries/reference"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "--tmp-dir"
                    },
                    "id": "#gatk4_getpileupsummaries.cwl/gatk4_getpileupsummaries/tmp_dir"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--variant"
                    },
                    "id": "#gatk4_getpileupsummaries.cwl/gatk4_getpileupsummaries/variant"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.input.nameroot + \"_pileupsummaries.table\")"
                    },
                    "id": "#gatk4_getpileupsummaries.cwl/gatk4_getpileupsummaries/output"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.input.nameroot + \"_pileupsummaries.table\")",
                    "prefix": "--output",
                    "separate": true
                },
                {
                    "valueFrom": "$(inputs.variant)",
                    "prefix": "--intervals"
                }
            ],
            "baseCommand": [
                "GetPileupSummaries"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#gatk_calculatecontamination_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_gatk_CalculateContamination.log\")"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#gatk_calculatecontamination_to_sqlite.cwl/gatk_calculatecontamination_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "gatk_CalculateContamination"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#json_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/json-to-sqlite:439b1b7f41fedc927859177a8073ac8b9ab8179b9c474fc274ac415d95b6eb7c"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--input_json"
                    },
                    "id": "#json_to_sqlite.cwl/json_to_sqlite/input_json"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#json_to_sqlite.cwl/json_to_sqlite/job_uuid"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--table_name"
                    },
                    "id": "#json_to_sqlite.cwl/json_to_sqlite/table_name"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid).log"
                    },
                    "id": "#json_to_sqlite.cwl/json_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid).db"
                    },
                    "id": "#json_to_sqlite.cwl/json_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "json_to_sqlite"
            ]
        },
        {
            "class": "ExpressionTool",
            "id": "#merge_fastq_records.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": "#readgroup.yml/readgroup_fastq_file"
                        }
                    },
                    "id": "#merge_fastq_records.cwl/merge_fastq_records/input"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#merge_fastq_records.cwl/merge_fastq_records/output"
                }
            ],
            "expression": "${\n  var output = [];\n  for (var i = 0; i < inputs.input.length; i++) {\n    var readgroup_array = inputs.input[i];\n    for (var j = 0; j < readgroup_array.length; j++) {\n      var readgroup = readgroup_array[j];\n      output.push(readgroup);\n    }\n  }\n\n  return {'output': output}\n}\n"
        },
        {
            "class": "CommandLineTool",
            "id": "#merge_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/merge_sqlite:1b3a6f55be8579ecfb4c9c0513c3b710717a8f4cd8e79c88ee8c0f28f604faa3"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": "${\nvar req_space = 0;\nfor (var i = 0; i < inputs.source_sqlite.length; i++) {\n    req_space += inputs.source_sqlite[i].size;\n  }\nreturn Math.ceil(2 * (req_space / 1048576));\n}\n",
                    "outdirMin": "${\nvar req_space = 0;\nfor (var i = 0; i < inputs.source_sqlite.length; i++) {\n    req_space += inputs.source_sqlite[i].size;\n  }\nreturn Math.ceil(req_space / 1048576);\n}\n"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#merge_sqlite.cwl/merge_sqlite/job_uuid"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File",
                        "inputBinding": {
                            "prefix": "--source_sqlite"
                        }
                    },
                    "id": "#merge_sqlite.cwl/merge_sqlite/source_sqlite"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#merge_sqlite.cwl/merge_sqlite/destination_sqlite"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".log\")"
                    },
                    "id": "#merge_sqlite.cwl/merge_sqlite/log"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/merge_sqlite"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collecthsmetrics.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 49152,
                    "ramMax": 49152,
                    "tmpdirMin": 1000,
                    "tmpdirMax": 1000,
                    "outdirMin": 1000,
                    "outdirMax": 1000
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "BAIT_INTERVALS=",
                        "position": 10,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/BAIT_INTERVALS"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "BAIT_SET_NAME=",
                        "position": 11,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/BAIT_SET_NAME"
                },
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "CLIP_OVERLAPPING_READS=",
                        "position": 12,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/CLIP_OVERLAPPING_READS"
                },
                {
                    "type": "int",
                    "default": 200,
                    "inputBinding": {
                        "prefix": "COVERAGE_CAP=",
                        "position": 13,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/COVERAGE_CAP"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "position": 14,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/INPUT"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "position": 15,
                            "separate": false
                        }
                    },
                    "default": [
                        "ALL_READS",
                        "LIBRARY",
                        "SAMPLE",
                        "READ_GROUP"
                    ],
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/METRIC_ACCUMULATION_LEVEL"
                },
                {
                    "type": "int",
                    "default": 20,
                    "inputBinding": {
                        "prefix": "MINIMUM_BASE_QUALITY=",
                        "position": 16,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/MINIMUM_BASE_QUALITY"
                },
                {
                    "type": "int",
                    "default": 20,
                    "inputBinding": {
                        "prefix": "MINIMUM_MAPPING_QUALITY=",
                        "position": 17,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/MINIMUM_MAPPING_QUALITY"
                },
                {
                    "type": "int",
                    "default": 250,
                    "inputBinding": {
                        "prefix": "NEAR_DISTANCE=",
                        "position": 18,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/NEAR_DISTANCE"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "OUTPUT=",
                        "position": 19,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/OUTPUT"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "PER_BASE_COVERAGE=",
                        "position": 20,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/PER_BASE_COVERAGE"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "PER_TARGET_COVERAGE=",
                        "position": 21,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/PER_TARGET_COVERAGE"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE=",
                        "position": 22,
                        "separate": false
                    },
                    "secondaryFiles": [
                        ".fai"
                    ],
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/REFERENCE_SEQUENCE"
                },
                {
                    "type": "int",
                    "default": 10000,
                    "inputBinding": {
                        "prefix": "SAMPLE_SIZE=",
                        "position": 23,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/SAMPLE_SIZE"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "TARGET_INTERVALS=",
                        "position": 24,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/TARGET_INTERVALS"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "position": 25,
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/VALIDATION_STRINGENCY"
                },
                {
                    "default": "48G",
                    "type": "string",
                    "inputBinding": {
                        "position": -10,
                        "prefix": "-Xmx",
                        "separate": false
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/java_xmx"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.OUTPUT)"
                    },
                    "id": "#picard_collecthsmetrics.cwl/picard_collecthsmetrics/METRIC_OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "-jar",
                    "position": -9
                },
                {
                    "valueFrom": "/usr/local/bin/picard.jar",
                    "position": -8
                },
                {
                    "valueFrom": "CollectHsMetrics",
                    "position": -7
                }
            ],
            "baseCommand": [
                "java"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collecthsmetrics_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_CollectHsMetrics.log\")"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_collecthsmetrics_to_sqlite.cwl/picard_collecthsmetrics_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "CollectHsMetrics"
            ]
        },
        {
            "id": "#picard_collectoxogmetrics.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 10000,
                    "ramMax": 10000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "class": "CommandLineTool",
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "CONTEXTS=",
                            "separate": false
                        }
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/CONTEXTS"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "DB_SNP=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/DB_SNP"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/INPUT"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/REFERENCE_SEQUENCE"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "TMP_DIR=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/TMP_DIR"
                },
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "USE_OQ=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/USE_OQ"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/VALIDATION_STRINGENCY"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.basename + \".oxometrics\")"
                    },
                    "id": "#picard_collectoxogmetrics.cwl/picard_collectoxogmetrics/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.INPUT.basename + \".oxometrics\")",
                    "prefix": "OUTPUT=",
                    "separate": false
                }
            ],
            "baseCommand": [
                "java",
                "-jar",
                "/usr/local/bin/picard.jar",
                "CollectOxoGMetrics"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collectoxogmetrics_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--fasta"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/fasta"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/metric_path"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--vcf"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/vcf"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_CollectOxoGMetrics.log\")"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_collectoxogmetrics_to_sqlite.cwl/picard_collectoxogmetrics_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "CollectOxoGMetrics"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collecttargetedpcrmetrics.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 32768,
                    "ramMax": 32768,
                    "tmpdirMin": 1000,
                    "tmpdirMax": 1000,
                    "outdirMin": 1000,
                    "outdirMax": 1000
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "AMPLICON_INTERVALS=",
                        "position": 10,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/AMPLICON_INTERVALS"
                },
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "CLIP_OVERLAPPING_READS=",
                        "position": 12,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/CLIP_OVERLAPPING_READS"
                },
                {
                    "type": "long",
                    "default": 200,
                    "inputBinding": {
                        "prefix": "COVERAGE_CAP=",
                        "position": 13,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/COVERAGE_CAP"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "CUSTOM_AMPLICON_SET_NAME=",
                        "position": 11,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/CUSTOM_AMPLICON_SET_NAME"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "position": 14,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/INPUT"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "string",
                        "inputBinding": {
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "position": 15,
                            "separate": false
                        }
                    },
                    "default": [
                        "ALL_READS",
                        "LIBRARY",
                        "SAMPLE",
                        "READ_GROUP"
                    ],
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/METRIC_ACCUMULATION_LEVEL"
                },
                {
                    "type": "long",
                    "default": 20,
                    "inputBinding": {
                        "prefix": "MINIMUM_BASE_QUALITY=",
                        "position": 16,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/MINIMUM_BASE_QUALITY"
                },
                {
                    "type": "long",
                    "default": 20,
                    "inputBinding": {
                        "prefix": "MINIMUM_MAPPING_QUALITY=",
                        "position": 17,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/MINIMUM_MAPPING_QUALITY"
                },
                {
                    "type": "long",
                    "default": 250,
                    "inputBinding": {
                        "prefix": "NEAR_DISTANCE=",
                        "position": 18,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/NEAR_DISTANCE"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "OUTPUT=",
                        "position": 19,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/OUTPUT"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "PER_BASE_COVERAGE=",
                        "position": 20,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/PER_BASE_COVERAGE"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "PER_TARGET_COVERAGE=",
                        "position": 21,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/PER_TARGET_COVERAGE"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE=",
                        "position": 22,
                        "separate": false
                    },
                    "secondaryFiles": [
                        ".fai"
                    ],
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/REFERENCE_SEQUENCE"
                },
                {
                    "type": "long",
                    "default": 10000,
                    "inputBinding": {
                        "prefix": "SAMPLE_SIZE=",
                        "position": 23,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/SAMPLE_SIZE"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "TARGET_INTERVALS=",
                        "position": 24,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/TARGET_INTERVALS"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "position": 25,
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/VALIDATION_STRINGENCY"
                },
                {
                    "default": "32G",
                    "type": "string",
                    "inputBinding": {
                        "position": -10,
                        "prefix": "-Xmx",
                        "separate": false
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/java_xmx"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.OUTPUT)"
                    },
                    "id": "#picard_collecttargetedpcrmetrics.cwl/picard_collecttargetedpcrmetrics/METRIC_OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "-jar",
                    "position": -9
                },
                {
                    "valueFrom": "/usr/local/bin/picard.jar",
                    "position": -8
                },
                {
                    "valueFrom": "CollectTargetedPcrMetrics",
                    "position": -7
                }
            ],
            "baseCommand": [
                "java"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_CollectTargetedPcrMetrics.log\")"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_collecttargetedpcrmetrics_to_sqlite.cwl/picard_collecttargetedpcrmetrics_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "CollectTargetedPcrMetrics"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collectwgsmetrics.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 10000,
                    "ramMax": 10000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "separate": false
                    },
                    "id": "#picard_collectwgsmetrics.cwl/picard_collectwgsmetrics/INPUT"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "REFERENCE_SEQUENCE=",
                        "separate": false
                    },
                    "id": "#picard_collectwgsmetrics.cwl/picard_collectwgsmetrics/REFERENCE_SEQUENCE"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_collectwgsmetrics.cwl/picard_collectwgsmetrics/VALIDATION_STRINGENCY"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.nameroot + \".metrics\")"
                    },
                    "id": "#picard_collectwgsmetrics.cwl/picard_collectwgsmetrics/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.INPUT.nameroot + \".metrics\")",
                    "prefix": "OUTPUT=",
                    "separate": false
                }
            ],
            "baseCommand": [
                "java",
                "-jar",
                "/usr/local/bin/picard.jar",
                "CollectWgsMetrics"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_collectwgsmetrics_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 10,
                    "tmpdirMax": 10,
                    "outdirMin": 10,
                    "outdirMax": 10
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--fasta"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/fasta"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_CollectWgsMetrics.log\")"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_collectwgsmetrics_to_sqlite.cwl/picard_collectwgsmetrics_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "CollectWgsMetrics"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_markduplicates.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "function sum_file_array_size(farr) {\n  var divisor = 1048576;\n  var total = 0;\n  for (var i = 0; i<farr.length; i++) {\n    total += farr[i].size\n  }\n  return Math.ceil(total / divisor);\n}\n",
                        "function file_size_multiplier(fobj, mult) {\n  mult = typeof mult !== 'undefined' ? mult : 1;\n  var divisor = 1048576;\n  return Math.ceil(mult * fobj.size / divisor);\n}\n",
                        "function fastq_files_size(forward, reverse) {\n  var divisor = 1048576;\n  if (reverse == null) {\n    return Math.ceil(forward.size / divisor)\n  } else {\n    return Math.ceil((forward.size + reverse.size) / divisor)\n  }\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 15000,
                    "ramMax": 15000,
                    "tmpdirMin": "$(Math.ceil(1.1 * sum_file_array_size(inputs.INPUT)))",
                    "outdirMin": "$(Math.ceil(1.1 * sum_file_array_size(inputs.INPUT)))"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "ASSUME_SORT_ORDER=",
                        "separate": false
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/ASSUME_SORT_ORDER"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false
                        }
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/INPUT"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "OUTPUT=",
                        "separate": false
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/OUTBAM"
                },
                {
                    "default": ".",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "TMP_DIR=",
                        "separate": false
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/TMP_DIR"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/VALIDATION_STRINGENCY"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.OUTBAM + \".metrics\")"
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/METRICS"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.OUTBAM)"
                    },
                    "id": "#picard_markduplicates.cwl/picard_markduplicates/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.OUTBAM + \".metrics\")",
                    "prefix": "METRICS_FILE=",
                    "separate": false
                }
            ],
            "baseCommand": [
                "java",
                "-jar",
                "/usr/local/bin/picard.jar",
                "MarkDuplicates"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_markduplicates_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_MarkDuplicates.log\")"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_markduplicates_to_sqlite.cwl/picard_markduplicates_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "MarkDuplicates"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_mergesamfiles.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "function sum_file_array_size(farr) {\n  var divisor = 1048576;\n  var total = 0;\n  for (var i = 0; i<farr.length; i++) {\n    total += farr[i].size\n  }\n  return Math.ceil(total / divisor);\n}\n",
                        "function file_size_multiplier(fobj, mult) {\n  mult = typeof mult !== 'undefined' ? mult : 1;\n  var divisor = 1048576;\n  return Math.ceil(mult * fobj.size / divisor);\n}\n",
                        "function fastq_files_size(forward, reverse) {\n  var divisor = 1048576;\n  if (reverse == null) {\n    return Math.ceil(forward.size / divisor)\n  } else {\n    return Math.ceil((forward.size + reverse.size) / divisor)\n  }\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 10000,
                    "ramMax": 10000,
                    "tmpdirMin": "$(Math.ceil(2 * sum_file_array_size(inputs.INPUT)))",
                    "outdirMin": "$(Math.ceil(2 * sum_file_array_size(inputs.INPUT)))"
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "default": "false",
                    "inputBinding": {
                        "prefix": "ASSUME_SORTED=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/ASSUME_SORTED"
                },
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "CREATE_INDEX=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/CREATE_INDEX"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "File",
                        "inputBinding": {
                            "prefix": "INPUT=",
                            "separate": false
                        }
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/INPUT"
                },
                {
                    "type": [
                        "null",
                        "File"
                    ],
                    "inputBinding": {
                        "prefix": "INTERVALS=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/INTERVALS"
                },
                {
                    "type": "string",
                    "default": "false",
                    "inputBinding": {
                        "prefix": "MERGE_SEQUENCE_DICTIONARIES=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/MERGE_SEQUENCE_DICTIONARIES"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "OUTPUT=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/OUTPUT"
                },
                {
                    "type": "string",
                    "default": "coordinate",
                    "inputBinding": {
                        "prefix": "SORT_ORDER=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/SORT_ORDER"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "TMP_DIR=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/TMP_DIR"
                },
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "USE_THREADING=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/USE_THREADING"
                },
                {
                    "type": "string",
                    "default": "STRICT",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/VALIDATION_STRINGENCY"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.OUTPUT)"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#picard_mergesamfiles.cwl/picard_mergesamfiles/MERGED_OUTPUT"
                }
            ],
            "baseCommand": [
                "java",
                "-jar",
                "/usr/local/bin/picard.jar",
                "MergeSamFiles"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_validatesamfile.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard:2.26.10"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 5000,
                    "ramMax": 5000,
                    "tmpdirMin": 1000,
                    "tmpdirMax": 1000,
                    "outdirMin": 1000,
                    "outdirMax": 1000
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "default": "true",
                    "inputBinding": {
                        "prefix": "IGNORE_WARNINGS=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/IGNORE_WARNINGS"
                },
                {
                    "type": "string",
                    "default": "NONE",
                    "inputBinding": {
                        "prefix": "INDEX_VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/INDEX_VALIDATION_STRINGENCY"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "INPUT=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/INPUT"
                },
                {
                    "type": "long",
                    "default": 100,
                    "inputBinding": {
                        "prefix": "MAX_OUTPUT=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/MAX_OUTPUT"
                },
                {
                    "type": "string",
                    "default": "VERBOSE",
                    "inputBinding": {
                        "prefix": "MODE=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/MODE"
                },
                {
                    "type": "string",
                    "default": ".",
                    "inputBinding": {
                        "prefix": "TMP_DIR=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/TMP_DIR"
                },
                {
                    "type": "string",
                    "default": "false",
                    "inputBinding": {
                        "prefix": "VALIDATE_INDEX=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/VALIDATE_INDEX"
                },
                {
                    "default": "STRICT",
                    "type": "string",
                    "inputBinding": {
                        "prefix": "VALIDATION_STRINGENCY=",
                        "separate": false
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/VALIDATION_STRINGENCY"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.basename + \".metrics\")"
                    },
                    "id": "#picard_validatesamfile.cwl/picard_validatesamfile/OUTPUT"
                }
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.INPUT.basename + \".metrics\")",
                    "prefix": "OUTPUT=",
                    "separate": false
                }
            ],
            "successCodes": [
                0,
                2,
                3
            ],
            "baseCommand": [
                "java",
                "-jar",
                "/usr/local/bin/picard.jar",
                "ValidateSamFile",
                "IS_BISULFITE_SEQUENCED=false"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#picard_validatesamfile_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/picard_metrics_sqlite:1.0.0"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_picard_ValidateSamFile.log\")"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#picard_validatesamfile_to_sqlite.cwl/picard_validatesamfile_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "--metric_name",
                "ValidateSamFile"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#readgroup_json_db.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/readgroup_json_db:d1c36c48491afa45c76c23624ecf69b37b4f276019cb6e168364f564452e5b37"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#readgroup_json_db.cwl/readgroup_json_db/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--json_path"
                    },
                    "id": "#readgroup_json_db.cwl/readgroup_json_db/json_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid +\".log\")"
                    },
                    "id": "#readgroup_json_db.cwl/readgroup_json_db/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#readgroup_json_db.cwl/readgroup_json_db/output_sqlite"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/readgroup_json_db"
            ]
        },
        {
            "class": "ExpressionTool",
            "id": "#rename_fastq_records.cwl",
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "SchemaDefRequirement",
                    "types": [
                        {
                            "$import": "#readgroup.yml/readgroup_meta"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_file"
                        },
                        {
                            "$import": "#readgroup.yml/readgroup_fastq_uuid"
                        },
                        {
                            "$import": "#readgroup.yml/readgroups_bam_uuid"
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#rename_fastq_records.cwl/rename_fastq_records/input"
                },
                {
                    "type": "string",
                    "id": "#rename_fastq_records.cwl/rename_fastq_records/tag"
                }
            ],
            "outputs": [
                {
                    "type": {
                        "type": "array",
                        "items": "#readgroup.yml/readgroup_fastq_file"
                    },
                    "id": "#rename_fastq_records.cwl/rename_fastq_records/output"
                }
            ],
            "expression": "${\n      function rename(root, index, suffix) {\n          var n = root.toString() + \"_\" + index.toString() + suffix\n          return n\n      }\n      var i = inputs.tag\n      var output = [];\n      var suffixes = [\n          \"_1.fq.gz\",\n          \"_2.fq.gz\",\n          \"_o1.fq.gz\",\n          \"_o2.fq.gz\",\n          \"_s.fq.gz\"\n      ]\n      for (var j = 0; j < inputs.input.length; j++) {\n          var readgroup = inputs.input[j];\n          var foward_fq = readgroup[\"forward_fastq\"][\"basename\"]\n          for (var k = 0; k < suffixes.length; k++) {\n              if (foward_fq.endsWith(suffixes[k])) {\n                  readgroup[\"forward_fastq\"][\"basename\"] = rename(i, j, suffixes[k]);\n              }\n          }\n          if (readgroup[\"reverse_fastq\"]){\n              var reverse_fq = readgroup[\"reverse_fastq\"][\"basename\"]\n              for (var k = 0; k < suffixes.length; k++) {\n                  if (reverse_fq.endsWith(suffixes[k])) {\n                      readgroup[\"reverse_fastq\"][\"basename\"] = rename(i, j, suffixes[k]);\n                  }\n              }\n          }\n          output.push(readgroup);\n      }\n      return {'output': output}\n  }\n"
        },
        {
            "class": "CommandLineTool",
            "id": "#root_fasta_dnaseq.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/base-u22.04:2.2.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "$(inputs.fasta.basename)",
                            "entry": "$(inputs.fasta)"
                        },
                        {
                            "entryname": "$(inputs.fasta_amb.basename)",
                            "entry": "$(inputs.fasta_amb)"
                        },
                        {
                            "entryname": "$(inputs.fasta_ann.basename)",
                            "entry": "$(inputs.fasta_ann)"
                        },
                        {
                            "entryname": "$(inputs.fasta_bwt.basename)",
                            "entry": "$(inputs.fasta_bwt)"
                        },
                        {
                            "entryname": "$(inputs.fasta_dict.basename)",
                            "entry": "$(inputs.fasta_dict)"
                        },
                        {
                            "entryname": "$(inputs.fasta_fai.basename)",
                            "entry": "$(inputs.fasta_fai)"
                        },
                        {
                            "entryname": "$(inputs.fasta_pac.basename)",
                            "entry": "$(inputs.fasta_pac)"
                        },
                        {
                            "entryname": "$(inputs.fasta_sa.basename)",
                            "entry": "$(inputs.fasta_sa)"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 500,
                    "ramMax": 500,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_amb"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_ann"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_bwt"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_dict"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_fai"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_pac"
                },
                {
                    "type": "File",
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/fasta_sa"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.fasta.basename)"
                    },
                    "secondaryFiles": [
                        ".amb",
                        ".ann",
                        ".bwt",
                        ".fai",
                        ".pac",
                        ".sa",
                        "^.dict"
                    ],
                    "id": "#root_fasta_dnaseq.cwl/root_fasta_dnaseq/output"
                }
            ],
            "baseCommand": [
                "true"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#root_vcf.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/base-u22.04:2.2.0"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entryname": "$(inputs.vcf.basename)",
                            "entry": "$(inputs.vcf)"
                        },
                        {
                            "entryname": "$(inputs.vcf_index.basename)",
                            "entry": "$(inputs.vcf_index)"
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 500,
                    "ramMax": 500,
                    "tmpdirMin": 1,
                    "tmpdirMax": 1,
                    "outdirMin": 1,
                    "outdirMax": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "id": "#root_vcf.cwl/root_vcf/vcf"
                },
                {
                    "type": "File",
                    "id": "#root_vcf.cwl/root_vcf/vcf_index"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.vcf.basename)"
                    },
                    "secondaryFiles": [
                        ".tbi"
                    ],
                    "id": "#root_vcf.cwl/root_vcf/output"
                }
            ],
            "baseCommand": "true"
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_flagstat.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools:147bd4cc606a63c7435907d97fea6e94e9ea9ed58c18f390cab8bc40b1992df7"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.threads)",
                    "ramMin": 5000,
                    "ramMax": 5000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#samtools_flagstat.cwl/samtools_flagstat/INPUT"
                },
                {
                    "type": "long",
                    "inputBinding": {
                        "position": 0,
                        "prefix": "-@"
                    },
                    "id": "#samtools_flagstat.cwl/samtools_flagstat/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.nameroot + \".flagstat\")"
                    },
                    "id": "#samtools_flagstat.cwl/samtools_flagstat/OUTPUT"
                }
            ],
            "stdout": "$(inputs.INPUT.nameroot + \".flagstat\")",
            "baseCommand": [
                "/usr/local/bin/samtools",
                "flagstat"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_flagstat_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools_metrics_sqlite:f64466282ce61dfc9251e7c32c5130928abf0a68c1f8e00b47d9709c5b3e3321"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 2000,
                    "ramMax": 2000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_samtools_flagstat.log\")"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#samtools_flagstat_to_sqlite.cwl/samtools_flagstat_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools_metrics_sqlite",
                "--metric_name",
                "flagstat"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_idxstats.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools:147bd4cc606a63c7435907d97fea6e94e9ea9ed58c18f390cab8bc40b1992df7"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 5000,
                    "ramMax": 5000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 0
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#samtools_idxstats.cwl/samtools_idxstats/INPUT"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.nameroot + \".idxstats\")"
                    },
                    "id": "#samtools_idxstats.cwl/samtools_idxstats/OUTPUT"
                }
            ],
            "stdout": "$(inputs.INPUT.nameroot + \".idxstats\")",
            "baseCommand": [
                "/usr/local/bin/samtools",
                "idxstats"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_idxstats_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools_metrics_sqlite:f64466282ce61dfc9251e7c32c5130928abf0a68c1f8e00b47d9709c5b3e3321"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_samtools_idxstats.log\")"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#samtools_idxstats_to_sqlite.cwl/samtools_idxstats_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools_metrics_sqlite",
                "--metric_name",
                "idxstats"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_index.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools:147bd4cc606a63c7435907d97fea6e94e9ea9ed58c18f390cab8bc40b1992df7"
                },
                {
                    "class": "InitialWorkDirRequirement",
                    "listing": [
                        {
                            "entry": "$(inputs.input_bam)",
                            "writable": false
                        }
                    ]
                },
                {
                    "class": "InlineJavascriptRequirement",
                    "expressionLib": [
                        "function sum_file_array_size(farr) {\n  var divisor = 1048576;\n  var total = 0;\n  for (var i = 0; i<farr.length; i++) {\n    total += farr[i].size\n  }\n  return Math.ceil(total / divisor);\n}\n",
                        "function file_size_multiplier(fobj, mult) {\n  mult = typeof mult !== 'undefined' ? mult : 1;\n  var divisor = 1048576;\n  return Math.ceil(mult * fobj.size / divisor);\n}\n",
                        "function fastq_files_size(forward, reverse) {\n  var divisor = 1048576;\n  if (reverse == null) {\n    return Math.ceil(forward.size / divisor)\n  } else {\n    return Math.ceil((forward.size + reverse.size) / divisor)\n  }\n}\n"
                    ]
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.threads)",
                    "ramMin": 1000,
                    "tmpdirMin": "$(file_size_multiplier(inputs.input_bam))",
                    "outdirMin": "$(file_size_multiplier(inputs.input_bam))"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1,
                        "valueFrom": "$(self.basename)"
                    },
                    "id": "#samtools_index.cwl/samtools_index/input_bam"
                },
                {
                    "type": "long",
                    "inputBinding": {
                        "position": 0,
                        "prefix": "-@"
                    },
                    "id": "#samtools_index.cwl/samtools_index/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.input_bam.basename)"
                    },
                    "secondaryFiles": [
                        "^.bai"
                    ],
                    "id": "#samtools_index.cwl/samtools_index/output_bam"
                }
            ],
            "baseCommand": [
                "samtools",
                "index",
                "-b"
            ],
            "arguments": [
                {
                    "valueFrom": "$(inputs.input_bam.basename.slice(0,-4) + '.bai')",
                    "position": 2
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_sort.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools:147bd4cc606a63c7435907d97fea6e94e9ea9ed58c18f390cab8bc40b1992df7"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.threads)",
                    "ramMin": 1000,
                    "tmpdirMin": "$((2 * inputs.input_bam.size) / 1048576)",
                    "outdirMin": "$((2 * inputs.input_bam.size) / 1048576)"
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 3
                    },
                    "id": "#samtools_sort.cwl/samtools_sort/input_bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "position": 1,
                        "prefix": "-o"
                    },
                    "id": "#samtools_sort.cwl/samtools_sort/output_bam"
                },
                {
                    "type": "string",
                    "default": "tmp_srt",
                    "inputBinding": {
                        "position": 2,
                        "prefix": "-T"
                    },
                    "id": "#samtools_sort.cwl/samtools_sort/prefix"
                },
                {
                    "type": "long",
                    "inputBinding": {
                        "position": 0,
                        "prefix": "-@"
                    },
                    "id": "#samtools_sort.cwl/samtools_sort/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.output_bam)"
                    },
                    "id": "#samtools_sort.cwl/samtools_sort/bam"
                }
            ],
            "baseCommand": [
                "samtools",
                "sort"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_stats.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools:147bd4cc606a63c7435907d97fea6e94e9ea9ed58c18f390cab8bc40b1992df7"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": "$(inputs.threads)",
                    "ramMin": 5000,
                    "tmpdirMin": 5,
                    "outdirMin": 5
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 1
                    },
                    "id": "#samtools_stats.cwl/samtools_stats/INPUT"
                },
                {
                    "type": "long",
                    "inputBinding": {
                        "position": 0,
                        "prefix": "-@"
                    },
                    "id": "#samtools_stats.cwl/samtools_stats/threads"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.INPUT.nameroot + \".stats\")"
                    },
                    "id": "#samtools_stats.cwl/samtools_stats/OUTPUT"
                }
            ],
            "stdout": "$(inputs.INPUT.nameroot + \".stats\")",
            "baseCommand": [
                "/usr/local/bin/samtools",
                "stats"
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#samtools_stats_to_sqlite.cwl",
            "requirements": [
                {
                    "class": "DockerRequirement",
                    "dockerPull": "docker.osdc.io/ncigdc/samtools_metrics_sqlite:f64466282ce61dfc9251e7c32c5130928abf0a68c1f8e00b47d9709c5b3e3321"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "coresMin": 1,
                    "coresMax": 1,
                    "ramMin": 1000,
                    "ramMax": 1000,
                    "tmpdirMin": 5,
                    "tmpdirMax": 5,
                    "outdirMin": 5,
                    "outdirMax": 5
                }
            ],
            "inputs": [
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--bam"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/bam"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--input_state"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/input_state"
                },
                {
                    "type": "string",
                    "inputBinding": {
                        "prefix": "--job_uuid"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/job_uuid"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "--metric_path"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/metric_path"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid+\"_samtools_stats.log\")"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/log"
                },
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.job_uuid + \".db\")"
                    },
                    "id": "#samtools_stats_to_sqlite.cwl/samtools_stats_to_sqlite/sqlite"
                }
            ],
            "baseCommand": [
                "/usr/local/bin/samtools_metrics_sqlite",
                "--metric_name",
                "stats"
            ]
        }
    ],
    "cwlVersion": "v1.0"
}
